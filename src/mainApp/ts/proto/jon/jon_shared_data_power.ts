// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.2
// source: jon_shared_data_power.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  JonGuiDataMeteo,
  JonGuiDataPowerCanDevice,
  jonGuiDataPowerCanDeviceFromJSON,
  jonGuiDataPowerCanDeviceToJSON,
} from "./jon_shared_data_types";

export interface JonGuiDataPowerModuleState {
  voltage: number;
  current: number;
  power: number;
  isAlarm: boolean;
  canCmdAddress: number;
  canDataAddress: number;
  isPowerOn: boolean;
  canDevice: JonGuiDataPowerCanDevice;
}

export interface JonGuiDataPower {
  s0: JonGuiDataPowerModuleState | undefined;
  s1: JonGuiDataPowerModuleState | undefined;
  s2: JonGuiDataPowerModuleState | undefined;
  s3: JonGuiDataPowerModuleState | undefined;
  s4: JonGuiDataPowerModuleState | undefined;
  s5: JonGuiDataPowerModuleState | undefined;
  s6: JonGuiDataPowerModuleState | undefined;
  s7: JonGuiDataPowerModuleState | undefined;
  meteo: JonGuiDataMeteo | undefined;
}

function createBaseJonGuiDataPowerModuleState(): JonGuiDataPowerModuleState {
  return {
    voltage: 0,
    current: 0,
    power: 0,
    isAlarm: false,
    canCmdAddress: 0,
    canDataAddress: 0,
    isPowerOn: false,
    canDevice: 0,
  };
}

export const JonGuiDataPowerModuleState = {
  encode(message: JonGuiDataPowerModuleState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.voltage !== 0) {
      writer.uint32(8).int32(message.voltage);
    }
    if (message.current !== 0) {
      writer.uint32(16).int32(message.current);
    }
    if (message.power !== 0) {
      writer.uint32(24).int32(message.power);
    }
    if (message.isAlarm !== false) {
      writer.uint32(32).bool(message.isAlarm);
    }
    if (message.canCmdAddress !== 0) {
      writer.uint32(40).int32(message.canCmdAddress);
    }
    if (message.canDataAddress !== 0) {
      writer.uint32(48).int32(message.canDataAddress);
    }
    if (message.isPowerOn !== false) {
      writer.uint32(56).bool(message.isPowerOn);
    }
    if (message.canDevice !== 0) {
      writer.uint32(64).int32(message.canDevice);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JonGuiDataPowerModuleState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataPowerModuleState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.voltage = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.current = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.power = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isAlarm = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.canCmdAddress = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.canDataAddress = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isPowerOn = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.canDevice = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataPowerModuleState {
    return {
      voltage: isSet(object.voltage) ? globalThis.Number(object.voltage) : 0,
      current: isSet(object.current) ? globalThis.Number(object.current) : 0,
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
      isAlarm: isSet(object.isAlarm) ? globalThis.Boolean(object.isAlarm) : false,
      canCmdAddress: isSet(object.canCmdAddress) ? globalThis.Number(object.canCmdAddress) : 0,
      canDataAddress: isSet(object.canDataAddress) ? globalThis.Number(object.canDataAddress) : 0,
      isPowerOn: isSet(object.isPowerOn) ? globalThis.Boolean(object.isPowerOn) : false,
      canDevice: isSet(object.canDevice) ? jonGuiDataPowerCanDeviceFromJSON(object.canDevice) : 0,
    };
  },

  toJSON(message: JonGuiDataPowerModuleState): unknown {
    const obj: any = {};
    if (message.voltage !== 0) {
      obj.voltage = Math.round(message.voltage);
    }
    if (message.current !== 0) {
      obj.current = Math.round(message.current);
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    if (message.isAlarm !== false) {
      obj.isAlarm = message.isAlarm;
    }
    if (message.canCmdAddress !== 0) {
      obj.canCmdAddress = Math.round(message.canCmdAddress);
    }
    if (message.canDataAddress !== 0) {
      obj.canDataAddress = Math.round(message.canDataAddress);
    }
    if (message.isPowerOn !== false) {
      obj.isPowerOn = message.isPowerOn;
    }
    if (message.canDevice !== 0) {
      obj.canDevice = jonGuiDataPowerCanDeviceToJSON(message.canDevice);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataPowerModuleState>, I>>(base?: I): JonGuiDataPowerModuleState {
    return JonGuiDataPowerModuleState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataPowerModuleState>, I>>(object: I): JonGuiDataPowerModuleState {
    const message = createBaseJonGuiDataPowerModuleState();
    message.voltage = object.voltage ?? 0;
    message.current = object.current ?? 0;
    message.power = object.power ?? 0;
    message.isAlarm = object.isAlarm ?? false;
    message.canCmdAddress = object.canCmdAddress ?? 0;
    message.canDataAddress = object.canDataAddress ?? 0;
    message.isPowerOn = object.isPowerOn ?? false;
    message.canDevice = object.canDevice ?? 0;
    return message;
  },
};

function createBaseJonGuiDataPower(): JonGuiDataPower {
  return {
    s0: undefined,
    s1: undefined,
    s2: undefined,
    s3: undefined,
    s4: undefined,
    s5: undefined,
    s6: undefined,
    s7: undefined,
    meteo: undefined,
  };
}

export const JonGuiDataPower = {
  encode(message: JonGuiDataPower, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.s0 !== undefined) {
      JonGuiDataPowerModuleState.encode(message.s0, writer.uint32(10).fork()).ldelim();
    }
    if (message.s1 !== undefined) {
      JonGuiDataPowerModuleState.encode(message.s1, writer.uint32(18).fork()).ldelim();
    }
    if (message.s2 !== undefined) {
      JonGuiDataPowerModuleState.encode(message.s2, writer.uint32(26).fork()).ldelim();
    }
    if (message.s3 !== undefined) {
      JonGuiDataPowerModuleState.encode(message.s3, writer.uint32(34).fork()).ldelim();
    }
    if (message.s4 !== undefined) {
      JonGuiDataPowerModuleState.encode(message.s4, writer.uint32(42).fork()).ldelim();
    }
    if (message.s5 !== undefined) {
      JonGuiDataPowerModuleState.encode(message.s5, writer.uint32(50).fork()).ldelim();
    }
    if (message.s6 !== undefined) {
      JonGuiDataPowerModuleState.encode(message.s6, writer.uint32(58).fork()).ldelim();
    }
    if (message.s7 !== undefined) {
      JonGuiDataPowerModuleState.encode(message.s7, writer.uint32(66).fork()).ldelim();
    }
    if (message.meteo !== undefined) {
      JonGuiDataMeteo.encode(message.meteo, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JonGuiDataPower {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataPower();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.s0 = JonGuiDataPowerModuleState.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.s1 = JonGuiDataPowerModuleState.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.s2 = JonGuiDataPowerModuleState.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.s3 = JonGuiDataPowerModuleState.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.s4 = JonGuiDataPowerModuleState.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.s5 = JonGuiDataPowerModuleState.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.s6 = JonGuiDataPowerModuleState.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.s7 = JonGuiDataPowerModuleState.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.meteo = JonGuiDataMeteo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataPower {
    return {
      s0: isSet(object.s0) ? JonGuiDataPowerModuleState.fromJSON(object.s0) : undefined,
      s1: isSet(object.s1) ? JonGuiDataPowerModuleState.fromJSON(object.s1) : undefined,
      s2: isSet(object.s2) ? JonGuiDataPowerModuleState.fromJSON(object.s2) : undefined,
      s3: isSet(object.s3) ? JonGuiDataPowerModuleState.fromJSON(object.s3) : undefined,
      s4: isSet(object.s4) ? JonGuiDataPowerModuleState.fromJSON(object.s4) : undefined,
      s5: isSet(object.s5) ? JonGuiDataPowerModuleState.fromJSON(object.s5) : undefined,
      s6: isSet(object.s6) ? JonGuiDataPowerModuleState.fromJSON(object.s6) : undefined,
      s7: isSet(object.s7) ? JonGuiDataPowerModuleState.fromJSON(object.s7) : undefined,
      meteo: isSet(object.meteo) ? JonGuiDataMeteo.fromJSON(object.meteo) : undefined,
    };
  },

  toJSON(message: JonGuiDataPower): unknown {
    const obj: any = {};
    if (message.s0 !== undefined) {
      obj.s0 = JonGuiDataPowerModuleState.toJSON(message.s0);
    }
    if (message.s1 !== undefined) {
      obj.s1 = JonGuiDataPowerModuleState.toJSON(message.s1);
    }
    if (message.s2 !== undefined) {
      obj.s2 = JonGuiDataPowerModuleState.toJSON(message.s2);
    }
    if (message.s3 !== undefined) {
      obj.s3 = JonGuiDataPowerModuleState.toJSON(message.s3);
    }
    if (message.s4 !== undefined) {
      obj.s4 = JonGuiDataPowerModuleState.toJSON(message.s4);
    }
    if (message.s5 !== undefined) {
      obj.s5 = JonGuiDataPowerModuleState.toJSON(message.s5);
    }
    if (message.s6 !== undefined) {
      obj.s6 = JonGuiDataPowerModuleState.toJSON(message.s6);
    }
    if (message.s7 !== undefined) {
      obj.s7 = JonGuiDataPowerModuleState.toJSON(message.s7);
    }
    if (message.meteo !== undefined) {
      obj.meteo = JonGuiDataMeteo.toJSON(message.meteo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataPower>, I>>(base?: I): JonGuiDataPower {
    return JonGuiDataPower.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataPower>, I>>(object: I): JonGuiDataPower {
    const message = createBaseJonGuiDataPower();
    message.s0 = (object.s0 !== undefined && object.s0 !== null)
      ? JonGuiDataPowerModuleState.fromPartial(object.s0)
      : undefined;
    message.s1 = (object.s1 !== undefined && object.s1 !== null)
      ? JonGuiDataPowerModuleState.fromPartial(object.s1)
      : undefined;
    message.s2 = (object.s2 !== undefined && object.s2 !== null)
      ? JonGuiDataPowerModuleState.fromPartial(object.s2)
      : undefined;
    message.s3 = (object.s3 !== undefined && object.s3 !== null)
      ? JonGuiDataPowerModuleState.fromPartial(object.s3)
      : undefined;
    message.s4 = (object.s4 !== undefined && object.s4 !== null)
      ? JonGuiDataPowerModuleState.fromPartial(object.s4)
      : undefined;
    message.s5 = (object.s5 !== undefined && object.s5 !== null)
      ? JonGuiDataPowerModuleState.fromPartial(object.s5)
      : undefined;
    message.s6 = (object.s6 !== undefined && object.s6 !== null)
      ? JonGuiDataPowerModuleState.fromPartial(object.s6)
      : undefined;
    message.s7 = (object.s7 !== undefined && object.s7 !== null)
      ? JonGuiDataPowerModuleState.fromPartial(object.s7)
      : undefined;
    message.meteo = (object.meteo !== undefined && object.meteo !== null)
      ? JonGuiDataMeteo.fromPartial(object.meteo)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
