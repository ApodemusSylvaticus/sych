// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: jon_shared_cmd_heat_camera.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  JonGuiDataVideoChannelHeatAGCModes,
  jonGuiDataVideoChannelHeatAGCModesFromJSON,
  jonGuiDataVideoChannelHeatAGCModesToJSON,
  JonGuiDataVideoChannelHeatFilters,
  jonGuiDataVideoChannelHeatFiltersFromJSON,
  jonGuiDataVideoChannelHeatFiltersToJSON,
} from "./jon_shared_data_types";

export interface Root {
  focus?: Focus | undefined;
  zoom?: Zoom | undefined;
  setAgc?: SetAGC | undefined;
  setFilter?: SetFilters | undefined;
  setAutoFocus?: SetAutoFocus | undefined;
  setRecording?: SetRecording | undefined;
  start?: Start | undefined;
  stop?: Stop | undefined;
  photo?: Photo | undefined;
  syncZoom?: SyncZoomToHeatCamera | undefined;
  getPos?: GetPos | undefined;
  zoomIn?: ZoomIn | undefined;
  zoomOut?: ZoomOut | undefined;
  zoomStop?: ZoomStop | undefined;
  focusIn?: FocusIn | undefined;
  focusOut?: FocusOut | undefined;
  focusStop?: FocusStop | undefined;
  calibrate?: Calibrate | undefined;
  haltAll?: HaltAll | undefined;
  getMeteo?: GetMeteo | undefined;
  setDdeLevel?: SetDDELevel | undefined;
  enableDde?: EnableDDE | undefined;
  disableDde?: DisableDDE | undefined;
}

export interface HaltAll {
}

export interface EnableDDE {
}

export interface DisableDDE {
}

export interface SetValue {
  value: number;
}

export interface SetDDELevel {
  value: number;
}

export interface Move {
  targetValue: number;
  speed: number;
}

export interface ZoomIn {
}

export interface ZoomOut {
}

export interface ZoomStop {
}

export interface FocusIn {
}

export interface FocusOut {
}

export interface FocusStop {
}

export interface Calibrate {
}

export interface GetPos {
}

export interface Focus {
  setValue?: SetValue | undefined;
  move?: Move | undefined;
  halt?: Halt | undefined;
}

export interface Zoom {
  setValue?: SetValue | undefined;
  setZoomTableValue?: SetZoomTableValue | undefined;
  move?: Move | undefined;
  halt?: Halt | undefined;
  nextZoomTablePos?: NextZoomTablePos | undefined;
  prevZoomTablePos?: PrevZoomTablePos | undefined;
}

export interface SetZoomTableValue {
  value: number;
}

export interface NextZoomTablePos {
}

export interface PrevZoomTablePos {
}

export interface SetAGC {
  value: JonGuiDataVideoChannelHeatAGCModes;
}

export interface SetFilters {
  value: JonGuiDataVideoChannelHeatFilters;
}

export interface SetAutoFocus {
  value: boolean;
}

export interface SetRecording {
  value: boolean;
}

export interface Start {
}

export interface Stop {
}

export interface Halt {
}

export interface Photo {
}

export interface GetMeteo {
}

export interface SyncZoomToHeatCamera {
  value: boolean;
}

function createBaseRoot(): Root {
  return {
    focus: undefined,
    zoom: undefined,
    setAgc: undefined,
    setFilter: undefined,
    setAutoFocus: undefined,
    setRecording: undefined,
    start: undefined,
    stop: undefined,
    photo: undefined,
    syncZoom: undefined,
    getPos: undefined,
    zoomIn: undefined,
    zoomOut: undefined,
    zoomStop: undefined,
    focusIn: undefined,
    focusOut: undefined,
    focusStop: undefined,
    calibrate: undefined,
    haltAll: undefined,
    getMeteo: undefined,
    setDdeLevel: undefined,
    enableDde: undefined,
    disableDde: undefined,
  };
}

export const Root = {
  encode(message: Root, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.focus !== undefined) {
      Focus.encode(message.focus, writer.uint32(10).fork()).ldelim();
    }
    if (message.zoom !== undefined) {
      Zoom.encode(message.zoom, writer.uint32(18).fork()).ldelim();
    }
    if (message.setAgc !== undefined) {
      SetAGC.encode(message.setAgc, writer.uint32(26).fork()).ldelim();
    }
    if (message.setFilter !== undefined) {
      SetFilters.encode(message.setFilter, writer.uint32(34).fork()).ldelim();
    }
    if (message.setAutoFocus !== undefined) {
      SetAutoFocus.encode(message.setAutoFocus, writer.uint32(42).fork()).ldelim();
    }
    if (message.setRecording !== undefined) {
      SetRecording.encode(message.setRecording, writer.uint32(50).fork()).ldelim();
    }
    if (message.start !== undefined) {
      Start.encode(message.start, writer.uint32(58).fork()).ldelim();
    }
    if (message.stop !== undefined) {
      Stop.encode(message.stop, writer.uint32(66).fork()).ldelim();
    }
    if (message.photo !== undefined) {
      Photo.encode(message.photo, writer.uint32(74).fork()).ldelim();
    }
    if (message.syncZoom !== undefined) {
      SyncZoomToHeatCamera.encode(message.syncZoom, writer.uint32(82).fork()).ldelim();
    }
    if (message.getPos !== undefined) {
      GetPos.encode(message.getPos, writer.uint32(90).fork()).ldelim();
    }
    if (message.zoomIn !== undefined) {
      ZoomIn.encode(message.zoomIn, writer.uint32(98).fork()).ldelim();
    }
    if (message.zoomOut !== undefined) {
      ZoomOut.encode(message.zoomOut, writer.uint32(106).fork()).ldelim();
    }
    if (message.zoomStop !== undefined) {
      ZoomStop.encode(message.zoomStop, writer.uint32(114).fork()).ldelim();
    }
    if (message.focusIn !== undefined) {
      FocusIn.encode(message.focusIn, writer.uint32(122).fork()).ldelim();
    }
    if (message.focusOut !== undefined) {
      FocusOut.encode(message.focusOut, writer.uint32(130).fork()).ldelim();
    }
    if (message.focusStop !== undefined) {
      FocusStop.encode(message.focusStop, writer.uint32(138).fork()).ldelim();
    }
    if (message.calibrate !== undefined) {
      Calibrate.encode(message.calibrate, writer.uint32(146).fork()).ldelim();
    }
    if (message.haltAll !== undefined) {
      HaltAll.encode(message.haltAll, writer.uint32(154).fork()).ldelim();
    }
    if (message.getMeteo !== undefined) {
      GetMeteo.encode(message.getMeteo, writer.uint32(162).fork()).ldelim();
    }
    if (message.setDdeLevel !== undefined) {
      SetDDELevel.encode(message.setDdeLevel, writer.uint32(170).fork()).ldelim();
    }
    if (message.enableDde !== undefined) {
      EnableDDE.encode(message.enableDde, writer.uint32(178).fork()).ldelim();
    }
    if (message.disableDde !== undefined) {
      DisableDDE.encode(message.disableDde, writer.uint32(186).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Root {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.focus = Focus.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.zoom = Zoom.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.setAgc = SetAGC.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.setFilter = SetFilters.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.setAutoFocus = SetAutoFocus.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.setRecording = SetRecording.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.start = Start.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.stop = Stop.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.photo = Photo.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.syncZoom = SyncZoomToHeatCamera.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.getPos = GetPos.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.zoomIn = ZoomIn.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.zoomOut = ZoomOut.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.zoomStop = ZoomStop.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.focusIn = FocusIn.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.focusOut = FocusOut.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.focusStop = FocusStop.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.calibrate = Calibrate.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.haltAll = HaltAll.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.getMeteo = GetMeteo.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.setDdeLevel = SetDDELevel.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.enableDde = EnableDDE.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.disableDde = DisableDDE.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      focus: isSet(object.focus) ? Focus.fromJSON(object.focus) : undefined,
      zoom: isSet(object.zoom) ? Zoom.fromJSON(object.zoom) : undefined,
      setAgc: isSet(object.setAgc) ? SetAGC.fromJSON(object.setAgc) : undefined,
      setFilter: isSet(object.setFilter) ? SetFilters.fromJSON(object.setFilter) : undefined,
      setAutoFocus: isSet(object.setAutoFocus) ? SetAutoFocus.fromJSON(object.setAutoFocus) : undefined,
      setRecording: isSet(object.setRecording) ? SetRecording.fromJSON(object.setRecording) : undefined,
      start: isSet(object.start) ? Start.fromJSON(object.start) : undefined,
      stop: isSet(object.stop) ? Stop.fromJSON(object.stop) : undefined,
      photo: isSet(object.photo) ? Photo.fromJSON(object.photo) : undefined,
      syncZoom: isSet(object.syncZoom) ? SyncZoomToHeatCamera.fromJSON(object.syncZoom) : undefined,
      getPos: isSet(object.getPos) ? GetPos.fromJSON(object.getPos) : undefined,
      zoomIn: isSet(object.zoomIn) ? ZoomIn.fromJSON(object.zoomIn) : undefined,
      zoomOut: isSet(object.zoomOut) ? ZoomOut.fromJSON(object.zoomOut) : undefined,
      zoomStop: isSet(object.zoomStop) ? ZoomStop.fromJSON(object.zoomStop) : undefined,
      focusIn: isSet(object.focusIn) ? FocusIn.fromJSON(object.focusIn) : undefined,
      focusOut: isSet(object.focusOut) ? FocusOut.fromJSON(object.focusOut) : undefined,
      focusStop: isSet(object.focusStop) ? FocusStop.fromJSON(object.focusStop) : undefined,
      calibrate: isSet(object.calibrate) ? Calibrate.fromJSON(object.calibrate) : undefined,
      haltAll: isSet(object.haltAll) ? HaltAll.fromJSON(object.haltAll) : undefined,
      getMeteo: isSet(object.getMeteo) ? GetMeteo.fromJSON(object.getMeteo) : undefined,
      setDdeLevel: isSet(object.setDdeLevel) ? SetDDELevel.fromJSON(object.setDdeLevel) : undefined,
      enableDde: isSet(object.enableDde) ? EnableDDE.fromJSON(object.enableDde) : undefined,
      disableDde: isSet(object.disableDde) ? DisableDDE.fromJSON(object.disableDde) : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.focus !== undefined) {
      obj.focus = Focus.toJSON(message.focus);
    }
    if (message.zoom !== undefined) {
      obj.zoom = Zoom.toJSON(message.zoom);
    }
    if (message.setAgc !== undefined) {
      obj.setAgc = SetAGC.toJSON(message.setAgc);
    }
    if (message.setFilter !== undefined) {
      obj.setFilter = SetFilters.toJSON(message.setFilter);
    }
    if (message.setAutoFocus !== undefined) {
      obj.setAutoFocus = SetAutoFocus.toJSON(message.setAutoFocus);
    }
    if (message.setRecording !== undefined) {
      obj.setRecording = SetRecording.toJSON(message.setRecording);
    }
    if (message.start !== undefined) {
      obj.start = Start.toJSON(message.start);
    }
    if (message.stop !== undefined) {
      obj.stop = Stop.toJSON(message.stop);
    }
    if (message.photo !== undefined) {
      obj.photo = Photo.toJSON(message.photo);
    }
    if (message.syncZoom !== undefined) {
      obj.syncZoom = SyncZoomToHeatCamera.toJSON(message.syncZoom);
    }
    if (message.getPos !== undefined) {
      obj.getPos = GetPos.toJSON(message.getPos);
    }
    if (message.zoomIn !== undefined) {
      obj.zoomIn = ZoomIn.toJSON(message.zoomIn);
    }
    if (message.zoomOut !== undefined) {
      obj.zoomOut = ZoomOut.toJSON(message.zoomOut);
    }
    if (message.zoomStop !== undefined) {
      obj.zoomStop = ZoomStop.toJSON(message.zoomStop);
    }
    if (message.focusIn !== undefined) {
      obj.focusIn = FocusIn.toJSON(message.focusIn);
    }
    if (message.focusOut !== undefined) {
      obj.focusOut = FocusOut.toJSON(message.focusOut);
    }
    if (message.focusStop !== undefined) {
      obj.focusStop = FocusStop.toJSON(message.focusStop);
    }
    if (message.calibrate !== undefined) {
      obj.calibrate = Calibrate.toJSON(message.calibrate);
    }
    if (message.haltAll !== undefined) {
      obj.haltAll = HaltAll.toJSON(message.haltAll);
    }
    if (message.getMeteo !== undefined) {
      obj.getMeteo = GetMeteo.toJSON(message.getMeteo);
    }
    if (message.setDdeLevel !== undefined) {
      obj.setDdeLevel = SetDDELevel.toJSON(message.setDdeLevel);
    }
    if (message.enableDde !== undefined) {
      obj.enableDde = EnableDDE.toJSON(message.enableDde);
    }
    if (message.disableDde !== undefined) {
      obj.disableDde = DisableDDE.toJSON(message.disableDde);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.focus = (object.focus !== undefined && object.focus !== null) ? Focus.fromPartial(object.focus) : undefined;
    message.zoom = (object.zoom !== undefined && object.zoom !== null) ? Zoom.fromPartial(object.zoom) : undefined;
    message.setAgc = (object.setAgc !== undefined && object.setAgc !== null)
      ? SetAGC.fromPartial(object.setAgc)
      : undefined;
    message.setFilter = (object.setFilter !== undefined && object.setFilter !== null)
      ? SetFilters.fromPartial(object.setFilter)
      : undefined;
    message.setAutoFocus = (object.setAutoFocus !== undefined && object.setAutoFocus !== null)
      ? SetAutoFocus.fromPartial(object.setAutoFocus)
      : undefined;
    message.setRecording = (object.setRecording !== undefined && object.setRecording !== null)
      ? SetRecording.fromPartial(object.setRecording)
      : undefined;
    message.start = (object.start !== undefined && object.start !== null) ? Start.fromPartial(object.start) : undefined;
    message.stop = (object.stop !== undefined && object.stop !== null) ? Stop.fromPartial(object.stop) : undefined;
    message.photo = (object.photo !== undefined && object.photo !== null) ? Photo.fromPartial(object.photo) : undefined;
    message.syncZoom = (object.syncZoom !== undefined && object.syncZoom !== null)
      ? SyncZoomToHeatCamera.fromPartial(object.syncZoom)
      : undefined;
    message.getPos = (object.getPos !== undefined && object.getPos !== null)
      ? GetPos.fromPartial(object.getPos)
      : undefined;
    message.zoomIn = (object.zoomIn !== undefined && object.zoomIn !== null)
      ? ZoomIn.fromPartial(object.zoomIn)
      : undefined;
    message.zoomOut = (object.zoomOut !== undefined && object.zoomOut !== null)
      ? ZoomOut.fromPartial(object.zoomOut)
      : undefined;
    message.zoomStop = (object.zoomStop !== undefined && object.zoomStop !== null)
      ? ZoomStop.fromPartial(object.zoomStop)
      : undefined;
    message.focusIn = (object.focusIn !== undefined && object.focusIn !== null)
      ? FocusIn.fromPartial(object.focusIn)
      : undefined;
    message.focusOut = (object.focusOut !== undefined && object.focusOut !== null)
      ? FocusOut.fromPartial(object.focusOut)
      : undefined;
    message.focusStop = (object.focusStop !== undefined && object.focusStop !== null)
      ? FocusStop.fromPartial(object.focusStop)
      : undefined;
    message.calibrate = (object.calibrate !== undefined && object.calibrate !== null)
      ? Calibrate.fromPartial(object.calibrate)
      : undefined;
    message.haltAll = (object.haltAll !== undefined && object.haltAll !== null)
      ? HaltAll.fromPartial(object.haltAll)
      : undefined;
    message.getMeteo = (object.getMeteo !== undefined && object.getMeteo !== null)
      ? GetMeteo.fromPartial(object.getMeteo)
      : undefined;
    message.setDdeLevel = (object.setDdeLevel !== undefined && object.setDdeLevel !== null)
      ? SetDDELevel.fromPartial(object.setDdeLevel)
      : undefined;
    message.enableDde = (object.enableDde !== undefined && object.enableDde !== null)
      ? EnableDDE.fromPartial(object.enableDde)
      : undefined;
    message.disableDde = (object.disableDde !== undefined && object.disableDde !== null)
      ? DisableDDE.fromPartial(object.disableDde)
      : undefined;
    return message;
  },
};

function createBaseHaltAll(): HaltAll {
  return {};
}

export const HaltAll = {
  encode(_: HaltAll, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HaltAll {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHaltAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HaltAll {
    return {};
  },

  toJSON(_: HaltAll): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HaltAll>, I>>(base?: I): HaltAll {
    return HaltAll.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HaltAll>, I>>(_: I): HaltAll {
    const message = createBaseHaltAll();
    return message;
  },
};

function createBaseEnableDDE(): EnableDDE {
  return {};
}

export const EnableDDE = {
  encode(_: EnableDDE, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EnableDDE {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableDDE();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnableDDE {
    return {};
  },

  toJSON(_: EnableDDE): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EnableDDE>, I>>(base?: I): EnableDDE {
    return EnableDDE.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnableDDE>, I>>(_: I): EnableDDE {
    const message = createBaseEnableDDE();
    return message;
  },
};

function createBaseDisableDDE(): DisableDDE {
  return {};
}

export const DisableDDE = {
  encode(_: DisableDDE, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DisableDDE {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableDDE();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DisableDDE {
    return {};
  },

  toJSON(_: DisableDDE): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DisableDDE>, I>>(base?: I): DisableDDE {
    return DisableDDE.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisableDDE>, I>>(_: I): DisableDDE {
    const message = createBaseDisableDDE();
    return message;
  },
};

function createBaseSetValue(): SetValue {
  return { value: 0 };
}

export const SetValue = {
  encode(message: SetValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetValue>, I>>(base?: I): SetValue {
    return SetValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetValue>, I>>(object: I): SetValue {
    const message = createBaseSetValue();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetDDELevel(): SetDDELevel {
  return { value: 0 };
}

export const SetDDELevel = {
  encode(message: SetDDELevel, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDDELevel {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDDELevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDDELevel {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetDDELevel): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDDELevel>, I>>(base?: I): SetDDELevel {
    return SetDDELevel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDDELevel>, I>>(object: I): SetDDELevel {
    const message = createBaseSetDDELevel();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseMove(): Move {
  return { targetValue: 0, speed: 0 };
}

export const Move = {
  encode(message: Move, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetValue !== 0) {
      writer.uint32(13).float(message.targetValue);
    }
    if (message.speed !== 0) {
      writer.uint32(21).float(message.speed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Move {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.targetValue = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.speed = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Move {
    return {
      targetValue: isSet(object.targetValue) ? globalThis.Number(object.targetValue) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
    };
  },

  toJSON(message: Move): unknown {
    const obj: any = {};
    if (message.targetValue !== 0) {
      obj.targetValue = message.targetValue;
    }
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Move>, I>>(base?: I): Move {
    return Move.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Move>, I>>(object: I): Move {
    const message = createBaseMove();
    message.targetValue = object.targetValue ?? 0;
    message.speed = object.speed ?? 0;
    return message;
  },
};

function createBaseZoomIn(): ZoomIn {
  return {};
}

export const ZoomIn = {
  encode(_: ZoomIn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ZoomIn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoomIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ZoomIn {
    return {};
  },

  toJSON(_: ZoomIn): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoomIn>, I>>(base?: I): ZoomIn {
    return ZoomIn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoomIn>, I>>(_: I): ZoomIn {
    const message = createBaseZoomIn();
    return message;
  },
};

function createBaseZoomOut(): ZoomOut {
  return {};
}

export const ZoomOut = {
  encode(_: ZoomOut, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ZoomOut {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoomOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ZoomOut {
    return {};
  },

  toJSON(_: ZoomOut): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoomOut>, I>>(base?: I): ZoomOut {
    return ZoomOut.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoomOut>, I>>(_: I): ZoomOut {
    const message = createBaseZoomOut();
    return message;
  },
};

function createBaseZoomStop(): ZoomStop {
  return {};
}

export const ZoomStop = {
  encode(_: ZoomStop, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ZoomStop {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoomStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ZoomStop {
    return {};
  },

  toJSON(_: ZoomStop): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ZoomStop>, I>>(base?: I): ZoomStop {
    return ZoomStop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZoomStop>, I>>(_: I): ZoomStop {
    const message = createBaseZoomStop();
    return message;
  },
};

function createBaseFocusIn(): FocusIn {
  return {};
}

export const FocusIn = {
  encode(_: FocusIn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FocusIn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FocusIn {
    return {};
  },

  toJSON(_: FocusIn): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusIn>, I>>(base?: I): FocusIn {
    return FocusIn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusIn>, I>>(_: I): FocusIn {
    const message = createBaseFocusIn();
    return message;
  },
};

function createBaseFocusOut(): FocusOut {
  return {};
}

export const FocusOut = {
  encode(_: FocusOut, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FocusOut {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FocusOut {
    return {};
  },

  toJSON(_: FocusOut): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusOut>, I>>(base?: I): FocusOut {
    return FocusOut.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusOut>, I>>(_: I): FocusOut {
    const message = createBaseFocusOut();
    return message;
  },
};

function createBaseFocusStop(): FocusStop {
  return {};
}

export const FocusStop = {
  encode(_: FocusStop, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FocusStop {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FocusStop {
    return {};
  },

  toJSON(_: FocusStop): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusStop>, I>>(base?: I): FocusStop {
    return FocusStop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusStop>, I>>(_: I): FocusStop {
    const message = createBaseFocusStop();
    return message;
  },
};

function createBaseCalibrate(): Calibrate {
  return {};
}

export const Calibrate = {
  encode(_: Calibrate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Calibrate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalibrate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Calibrate {
    return {};
  },

  toJSON(_: Calibrate): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Calibrate>, I>>(base?: I): Calibrate {
    return Calibrate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Calibrate>, I>>(_: I): Calibrate {
    const message = createBaseCalibrate();
    return message;
  },
};

function createBaseGetPos(): GetPos {
  return {};
}

export const GetPos = {
  encode(_: GetPos, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPos {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPos {
    return {};
  },

  toJSON(_: GetPos): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPos>, I>>(base?: I): GetPos {
    return GetPos.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPos>, I>>(_: I): GetPos {
    const message = createBaseGetPos();
    return message;
  },
};

function createBaseFocus(): Focus {
  return { setValue: undefined, move: undefined, halt: undefined };
}

export const Focus = {
  encode(message: Focus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.setValue !== undefined) {
      SetValue.encode(message.setValue, writer.uint32(10).fork()).ldelim();
    }
    if (message.move !== undefined) {
      Move.encode(message.move, writer.uint32(18).fork()).ldelim();
    }
    if (message.halt !== undefined) {
      Halt.encode(message.halt, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Focus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setValue = SetValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.move = Move.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.halt = Halt.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Focus {
    return {
      setValue: isSet(object.setValue) ? SetValue.fromJSON(object.setValue) : undefined,
      move: isSet(object.move) ? Move.fromJSON(object.move) : undefined,
      halt: isSet(object.halt) ? Halt.fromJSON(object.halt) : undefined,
    };
  },

  toJSON(message: Focus): unknown {
    const obj: any = {};
    if (message.setValue !== undefined) {
      obj.setValue = SetValue.toJSON(message.setValue);
    }
    if (message.move !== undefined) {
      obj.move = Move.toJSON(message.move);
    }
    if (message.halt !== undefined) {
      obj.halt = Halt.toJSON(message.halt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Focus>, I>>(base?: I): Focus {
    return Focus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Focus>, I>>(object: I): Focus {
    const message = createBaseFocus();
    message.setValue = (object.setValue !== undefined && object.setValue !== null)
      ? SetValue.fromPartial(object.setValue)
      : undefined;
    message.move = (object.move !== undefined && object.move !== null) ? Move.fromPartial(object.move) : undefined;
    message.halt = (object.halt !== undefined && object.halt !== null) ? Halt.fromPartial(object.halt) : undefined;
    return message;
  },
};

function createBaseZoom(): Zoom {
  return {
    setValue: undefined,
    setZoomTableValue: undefined,
    move: undefined,
    halt: undefined,
    nextZoomTablePos: undefined,
    prevZoomTablePos: undefined,
  };
}

export const Zoom = {
  encode(message: Zoom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.setValue !== undefined) {
      SetValue.encode(message.setValue, writer.uint32(10).fork()).ldelim();
    }
    if (message.setZoomTableValue !== undefined) {
      SetZoomTableValue.encode(message.setZoomTableValue, writer.uint32(18).fork()).ldelim();
    }
    if (message.move !== undefined) {
      Move.encode(message.move, writer.uint32(26).fork()).ldelim();
    }
    if (message.halt !== undefined) {
      Halt.encode(message.halt, writer.uint32(34).fork()).ldelim();
    }
    if (message.nextZoomTablePos !== undefined) {
      NextZoomTablePos.encode(message.nextZoomTablePos, writer.uint32(42).fork()).ldelim();
    }
    if (message.prevZoomTablePos !== undefined) {
      PrevZoomTablePos.encode(message.prevZoomTablePos, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Zoom {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setValue = SetValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.setZoomTableValue = SetZoomTableValue.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.move = Move.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.halt = Halt.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nextZoomTablePos = NextZoomTablePos.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.prevZoomTablePos = PrevZoomTablePos.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Zoom {
    return {
      setValue: isSet(object.setValue) ? SetValue.fromJSON(object.setValue) : undefined,
      setZoomTableValue: isSet(object.setZoomTableValue)
        ? SetZoomTableValue.fromJSON(object.setZoomTableValue)
        : undefined,
      move: isSet(object.move) ? Move.fromJSON(object.move) : undefined,
      halt: isSet(object.halt) ? Halt.fromJSON(object.halt) : undefined,
      nextZoomTablePos: isSet(object.nextZoomTablePos) ? NextZoomTablePos.fromJSON(object.nextZoomTablePos) : undefined,
      prevZoomTablePos: isSet(object.prevZoomTablePos) ? PrevZoomTablePos.fromJSON(object.prevZoomTablePos) : undefined,
    };
  },

  toJSON(message: Zoom): unknown {
    const obj: any = {};
    if (message.setValue !== undefined) {
      obj.setValue = SetValue.toJSON(message.setValue);
    }
    if (message.setZoomTableValue !== undefined) {
      obj.setZoomTableValue = SetZoomTableValue.toJSON(message.setZoomTableValue);
    }
    if (message.move !== undefined) {
      obj.move = Move.toJSON(message.move);
    }
    if (message.halt !== undefined) {
      obj.halt = Halt.toJSON(message.halt);
    }
    if (message.nextZoomTablePos !== undefined) {
      obj.nextZoomTablePos = NextZoomTablePos.toJSON(message.nextZoomTablePos);
    }
    if (message.prevZoomTablePos !== undefined) {
      obj.prevZoomTablePos = PrevZoomTablePos.toJSON(message.prevZoomTablePos);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Zoom>, I>>(base?: I): Zoom {
    return Zoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Zoom>, I>>(object: I): Zoom {
    const message = createBaseZoom();
    message.setValue = (object.setValue !== undefined && object.setValue !== null)
      ? SetValue.fromPartial(object.setValue)
      : undefined;
    message.setZoomTableValue = (object.setZoomTableValue !== undefined && object.setZoomTableValue !== null)
      ? SetZoomTableValue.fromPartial(object.setZoomTableValue)
      : undefined;
    message.move = (object.move !== undefined && object.move !== null) ? Move.fromPartial(object.move) : undefined;
    message.halt = (object.halt !== undefined && object.halt !== null) ? Halt.fromPartial(object.halt) : undefined;
    message.nextZoomTablePos = (object.nextZoomTablePos !== undefined && object.nextZoomTablePos !== null)
      ? NextZoomTablePos.fromPartial(object.nextZoomTablePos)
      : undefined;
    message.prevZoomTablePos = (object.prevZoomTablePos !== undefined && object.prevZoomTablePos !== null)
      ? PrevZoomTablePos.fromPartial(object.prevZoomTablePos)
      : undefined;
    return message;
  },
};

function createBaseSetZoomTableValue(): SetZoomTableValue {
  return { value: 0 };
}

export const SetZoomTableValue = {
  encode(message: SetZoomTableValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetZoomTableValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetZoomTableValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetZoomTableValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetZoomTableValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetZoomTableValue>, I>>(base?: I): SetZoomTableValue {
    return SetZoomTableValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetZoomTableValue>, I>>(object: I): SetZoomTableValue {
    const message = createBaseSetZoomTableValue();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseNextZoomTablePos(): NextZoomTablePos {
  return {};
}

export const NextZoomTablePos = {
  encode(_: NextZoomTablePos, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NextZoomTablePos {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNextZoomTablePos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NextZoomTablePos {
    return {};
  },

  toJSON(_: NextZoomTablePos): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NextZoomTablePos>, I>>(base?: I): NextZoomTablePos {
    return NextZoomTablePos.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NextZoomTablePos>, I>>(_: I): NextZoomTablePos {
    const message = createBaseNextZoomTablePos();
    return message;
  },
};

function createBasePrevZoomTablePos(): PrevZoomTablePos {
  return {};
}

export const PrevZoomTablePos = {
  encode(_: PrevZoomTablePos, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PrevZoomTablePos {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrevZoomTablePos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PrevZoomTablePos {
    return {};
  },

  toJSON(_: PrevZoomTablePos): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PrevZoomTablePos>, I>>(base?: I): PrevZoomTablePos {
    return PrevZoomTablePos.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrevZoomTablePos>, I>>(_: I): PrevZoomTablePos {
    const message = createBasePrevZoomTablePos();
    return message;
  },
};

function createBaseSetAGC(): SetAGC {
  return { value: 0 };
}

export const SetAGC = {
  encode(message: SetAGC, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetAGC {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAGC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAGC {
    return { value: isSet(object.value) ? jonGuiDataVideoChannelHeatAGCModesFromJSON(object.value) : 0 };
  },

  toJSON(message: SetAGC): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataVideoChannelHeatAGCModesToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAGC>, I>>(base?: I): SetAGC {
    return SetAGC.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetAGC>, I>>(object: I): SetAGC {
    const message = createBaseSetAGC();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetFilters(): SetFilters {
  return { value: 0 };
}

export const SetFilters = {
  encode(message: SetFilters, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetFilters {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetFilters {
    return { value: isSet(object.value) ? jonGuiDataVideoChannelHeatFiltersFromJSON(object.value) : 0 };
  },

  toJSON(message: SetFilters): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataVideoChannelHeatFiltersToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetFilters>, I>>(base?: I): SetFilters {
    return SetFilters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetFilters>, I>>(object: I): SetFilters {
    const message = createBaseSetFilters();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetAutoFocus(): SetAutoFocus {
  return { value: false };
}

export const SetAutoFocus = {
  encode(message: SetAutoFocus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetAutoFocus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAutoFocus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAutoFocus {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: SetAutoFocus): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAutoFocus>, I>>(base?: I): SetAutoFocus {
    return SetAutoFocus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetAutoFocus>, I>>(object: I): SetAutoFocus {
    const message = createBaseSetAutoFocus();
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseSetRecording(): SetRecording {
  return { value: false };
}

export const SetRecording = {
  encode(message: SetRecording, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetRecording {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRecording();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRecording {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: SetRecording): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetRecording>, I>>(base?: I): SetRecording {
    return SetRecording.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetRecording>, I>>(object: I): SetRecording {
    const message = createBaseSetRecording();
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseStart(): Start {
  return {};
}

export const Start = {
  encode(_: Start, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Start {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Start {
    return {};
  },

  toJSON(_: Start): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Start>, I>>(base?: I): Start {
    return Start.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Start>, I>>(_: I): Start {
    const message = createBaseStart();
    return message;
  },
};

function createBaseStop(): Stop {
  return {};
}

export const Stop = {
  encode(_: Stop, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Stop {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Stop {
    return {};
  },

  toJSON(_: Stop): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Stop>, I>>(base?: I): Stop {
    return Stop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stop>, I>>(_: I): Stop {
    const message = createBaseStop();
    return message;
  },
};

function createBaseHalt(): Halt {
  return {};
}

export const Halt = {
  encode(_: Halt, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Halt {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHalt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Halt {
    return {};
  },

  toJSON(_: Halt): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Halt>, I>>(base?: I): Halt {
    return Halt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Halt>, I>>(_: I): Halt {
    const message = createBaseHalt();
    return message;
  },
};

function createBasePhoto(): Photo {
  return {};
}

export const Photo = {
  encode(_: Photo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Photo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhoto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Photo {
    return {};
  },

  toJSON(_: Photo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Photo>, I>>(base?: I): Photo {
    return Photo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Photo>, I>>(_: I): Photo {
    const message = createBasePhoto();
    return message;
  },
};

function createBaseGetMeteo(): GetMeteo {
  return {};
}

export const GetMeteo = {
  encode(_: GetMeteo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMeteo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeteo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMeteo {
    return {};
  },

  toJSON(_: GetMeteo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMeteo>, I>>(base?: I): GetMeteo {
    return GetMeteo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMeteo>, I>>(_: I): GetMeteo {
    const message = createBaseGetMeteo();
    return message;
  },
};

function createBaseSyncZoomToHeatCamera(): SyncZoomToHeatCamera {
  return { value: false };
}

export const SyncZoomToHeatCamera = {
  encode(message: SyncZoomToHeatCamera, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SyncZoomToHeatCamera {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncZoomToHeatCamera();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncZoomToHeatCamera {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: SyncZoomToHeatCamera): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncZoomToHeatCamera>, I>>(base?: I): SyncZoomToHeatCamera {
    return SyncZoomToHeatCamera.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncZoomToHeatCamera>, I>>(object: I): SyncZoomToHeatCamera {
    const message = createBaseSyncZoomToHeatCamera();
    message.value = object.value ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
