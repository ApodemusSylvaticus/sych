// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: jon_shared_cmd_rotary.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  JonGuiDataRotaryDirection,
  jonGuiDataRotaryDirectionFromJSON,
  jonGuiDataRotaryDirectionToJSON,
  JonGuiDataRotaryMode,
  jonGuiDataRotaryModeFromJSON,
  jonGuiDataRotaryModeToJSON,
} from "./jon_shared_data_types";

export interface Root {
  start?: Start | undefined;
  stop?: Stop | undefined;
  axis?: Axis | undefined;
  setPlatformAzimuth?: SetPlatformAzimuth | undefined;
  setPlatformElevation?: SetPlatformElevation | undefined;
  setPlatformBank?: SetPlatformBank | undefined;
  halt?: Halt | undefined;
  setCalculateBasePositionFromCompass?: SetCalculateBasePositionFromCompass | undefined;
  rotateToGps?: RotateToGPS | undefined;
  setOriginGps?: SetOriginGPS | undefined;
  getMeteo?: GetMeteo | undefined;
  setMode?: SetMode | undefined;
}

export interface Axis {
  azimuth: Azimuth | undefined;
  elevation: Elevation | undefined;
}

export interface SetMode {
  mode: JonGuiDataRotaryMode;
}

export interface SetAzimuthValue {
  value: number;
  direction: JonGuiDataRotaryDirection;
}

export interface RotateAzimuthTo {
  targetValue: number;
  speed: number;
  direction: JonGuiDataRotaryDirection;
}

export interface RotateAzimuth {
  speed: number;
  direction: JonGuiDataRotaryDirection;
}

export interface RotateElevation {
  speed: number;
  direction: JonGuiDataRotaryDirection;
}

export interface SetElevationValue {
  value: number;
}

export interface RotateElevationTo {
  targetValue: number;
  speed: number;
}

export interface RotateElevationRelative {
  value: number;
  speed: number;
  direction: JonGuiDataRotaryDirection;
}

export interface RotateElevationRelativeSet {
  value: number;
  direction: JonGuiDataRotaryDirection;
}

export interface RotateAzimuthRelative {
  value: number;
  speed: number;
  direction: JonGuiDataRotaryDirection;
}

export interface RotateAzimuthRelativeSet {
  value: number;
  direction: JonGuiDataRotaryDirection;
}

export interface SetPlatformAzimuth {
  value: number;
}

export interface SetPlatformElevation {
  value: number;
}

export interface SetPlatformBank {
  value: number;
}

export interface GetMeteo {
}

export interface Azimuth {
  setValue?: SetAzimuthValue | undefined;
  rotateTo?: RotateAzimuthTo | undefined;
  rotate?: RotateAzimuth | undefined;
  relative?: RotateAzimuthRelative | undefined;
  relativeSet?: RotateAzimuthRelativeSet | undefined;
  halt?: HaltAzimuth | undefined;
}

export interface Start {
}

export interface Stop {
}

export interface Halt {
}

export interface HaltAzimuth {
}

export interface HaltElevation {
}

export interface Elevation {
  setValue?: SetElevationValue | undefined;
  rotateTo?: RotateElevationTo | undefined;
  rotate?: RotateElevation | undefined;
  relative?: RotateElevationRelative | undefined;
  relativeSet?: RotateElevationRelativeSet | undefined;
  halt?: HaltElevation | undefined;
}

export interface SetCalculateBasePositionFromCompass {
  flag: boolean;
}

export interface RotateToGPS {
  latitude: number;
  longitude: number;
  altitude: number;
}

export interface SetOriginGPS {
  latitude: number;
  longitude: number;
  altitude: number;
}

function createBaseRoot(): Root {
  return {
    start: undefined,
    stop: undefined,
    axis: undefined,
    setPlatformAzimuth: undefined,
    setPlatformElevation: undefined,
    setPlatformBank: undefined,
    halt: undefined,
    setCalculateBasePositionFromCompass: undefined,
    rotateToGps: undefined,
    setOriginGps: undefined,
    getMeteo: undefined,
    setMode: undefined,
  };
}

export const Root = {
  encode(message: Root, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.start !== undefined) {
      Start.encode(message.start, writer.uint32(10).fork()).ldelim();
    }
    if (message.stop !== undefined) {
      Stop.encode(message.stop, writer.uint32(18).fork()).ldelim();
    }
    if (message.axis !== undefined) {
      Axis.encode(message.axis, writer.uint32(26).fork()).ldelim();
    }
    if (message.setPlatformAzimuth !== undefined) {
      SetPlatformAzimuth.encode(message.setPlatformAzimuth, writer.uint32(34).fork()).ldelim();
    }
    if (message.setPlatformElevation !== undefined) {
      SetPlatformElevation.encode(message.setPlatformElevation, writer.uint32(42).fork()).ldelim();
    }
    if (message.setPlatformBank !== undefined) {
      SetPlatformBank.encode(message.setPlatformBank, writer.uint32(50).fork()).ldelim();
    }
    if (message.halt !== undefined) {
      Halt.encode(message.halt, writer.uint32(58).fork()).ldelim();
    }
    if (message.setCalculateBasePositionFromCompass !== undefined) {
      SetCalculateBasePositionFromCompass.encode(message.setCalculateBasePositionFromCompass, writer.uint32(66).fork())
        .ldelim();
    }
    if (message.rotateToGps !== undefined) {
      RotateToGPS.encode(message.rotateToGps, writer.uint32(74).fork()).ldelim();
    }
    if (message.setOriginGps !== undefined) {
      SetOriginGPS.encode(message.setOriginGps, writer.uint32(82).fork()).ldelim();
    }
    if (message.getMeteo !== undefined) {
      GetMeteo.encode(message.getMeteo, writer.uint32(90).fork()).ldelim();
    }
    if (message.setMode !== undefined) {
      SetMode.encode(message.setMode, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Root {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.start = Start.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stop = Stop.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.axis = Axis.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.setPlatformAzimuth = SetPlatformAzimuth.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.setPlatformElevation = SetPlatformElevation.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.setPlatformBank = SetPlatformBank.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.halt = Halt.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.setCalculateBasePositionFromCompass = SetCalculateBasePositionFromCompass.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.rotateToGps = RotateToGPS.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.setOriginGps = SetOriginGPS.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.getMeteo = GetMeteo.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.setMode = SetMode.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      start: isSet(object.start) ? Start.fromJSON(object.start) : undefined,
      stop: isSet(object.stop) ? Stop.fromJSON(object.stop) : undefined,
      axis: isSet(object.axis) ? Axis.fromJSON(object.axis) : undefined,
      setPlatformAzimuth: isSet(object.setPlatformAzimuth)
        ? SetPlatformAzimuth.fromJSON(object.setPlatformAzimuth)
        : undefined,
      setPlatformElevation: isSet(object.setPlatformElevation)
        ? SetPlatformElevation.fromJSON(object.setPlatformElevation)
        : undefined,
      setPlatformBank: isSet(object.setPlatformBank) ? SetPlatformBank.fromJSON(object.setPlatformBank) : undefined,
      halt: isSet(object.halt) ? Halt.fromJSON(object.halt) : undefined,
      setCalculateBasePositionFromCompass: isSet(object.setCalculateBasePositionFromCompass)
        ? SetCalculateBasePositionFromCompass.fromJSON(object.setCalculateBasePositionFromCompass)
        : undefined,
      rotateToGps: isSet(object.rotateToGps) ? RotateToGPS.fromJSON(object.rotateToGps) : undefined,
      setOriginGps: isSet(object.setOriginGps) ? SetOriginGPS.fromJSON(object.setOriginGps) : undefined,
      getMeteo: isSet(object.getMeteo) ? GetMeteo.fromJSON(object.getMeteo) : undefined,
      setMode: isSet(object.setMode) ? SetMode.fromJSON(object.setMode) : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = Start.toJSON(message.start);
    }
    if (message.stop !== undefined) {
      obj.stop = Stop.toJSON(message.stop);
    }
    if (message.axis !== undefined) {
      obj.axis = Axis.toJSON(message.axis);
    }
    if (message.setPlatformAzimuth !== undefined) {
      obj.setPlatformAzimuth = SetPlatformAzimuth.toJSON(message.setPlatformAzimuth);
    }
    if (message.setPlatformElevation !== undefined) {
      obj.setPlatformElevation = SetPlatformElevation.toJSON(message.setPlatformElevation);
    }
    if (message.setPlatformBank !== undefined) {
      obj.setPlatformBank = SetPlatformBank.toJSON(message.setPlatformBank);
    }
    if (message.halt !== undefined) {
      obj.halt = Halt.toJSON(message.halt);
    }
    if (message.setCalculateBasePositionFromCompass !== undefined) {
      obj.setCalculateBasePositionFromCompass = SetCalculateBasePositionFromCompass.toJSON(
        message.setCalculateBasePositionFromCompass,
      );
    }
    if (message.rotateToGps !== undefined) {
      obj.rotateToGps = RotateToGPS.toJSON(message.rotateToGps);
    }
    if (message.setOriginGps !== undefined) {
      obj.setOriginGps = SetOriginGPS.toJSON(message.setOriginGps);
    }
    if (message.getMeteo !== undefined) {
      obj.getMeteo = GetMeteo.toJSON(message.getMeteo);
    }
    if (message.setMode !== undefined) {
      obj.setMode = SetMode.toJSON(message.setMode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.start = (object.start !== undefined && object.start !== null) ? Start.fromPartial(object.start) : undefined;
    message.stop = (object.stop !== undefined && object.stop !== null) ? Stop.fromPartial(object.stop) : undefined;
    message.axis = (object.axis !== undefined && object.axis !== null) ? Axis.fromPartial(object.axis) : undefined;
    message.setPlatformAzimuth = (object.setPlatformAzimuth !== undefined && object.setPlatformAzimuth !== null)
      ? SetPlatformAzimuth.fromPartial(object.setPlatformAzimuth)
      : undefined;
    message.setPlatformElevation = (object.setPlatformElevation !== undefined && object.setPlatformElevation !== null)
      ? SetPlatformElevation.fromPartial(object.setPlatformElevation)
      : undefined;
    message.setPlatformBank = (object.setPlatformBank !== undefined && object.setPlatformBank !== null)
      ? SetPlatformBank.fromPartial(object.setPlatformBank)
      : undefined;
    message.halt = (object.halt !== undefined && object.halt !== null) ? Halt.fromPartial(object.halt) : undefined;
    message.setCalculateBasePositionFromCompass =
      (object.setCalculateBasePositionFromCompass !== undefined && object.setCalculateBasePositionFromCompass !== null)
        ? SetCalculateBasePositionFromCompass.fromPartial(object.setCalculateBasePositionFromCompass)
        : undefined;
    message.rotateToGps = (object.rotateToGps !== undefined && object.rotateToGps !== null)
      ? RotateToGPS.fromPartial(object.rotateToGps)
      : undefined;
    message.setOriginGps = (object.setOriginGps !== undefined && object.setOriginGps !== null)
      ? SetOriginGPS.fromPartial(object.setOriginGps)
      : undefined;
    message.getMeteo = (object.getMeteo !== undefined && object.getMeteo !== null)
      ? GetMeteo.fromPartial(object.getMeteo)
      : undefined;
    message.setMode = (object.setMode !== undefined && object.setMode !== null)
      ? SetMode.fromPartial(object.setMode)
      : undefined;
    return message;
  },
};

function createBaseAxis(): Axis {
  return { azimuth: undefined, elevation: undefined };
}

export const Axis = {
  encode(message: Axis, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.azimuth !== undefined) {
      Azimuth.encode(message.azimuth, writer.uint32(10).fork()).ldelim();
    }
    if (message.elevation !== undefined) {
      Elevation.encode(message.elevation, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Axis {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAxis();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.azimuth = Azimuth.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.elevation = Elevation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Axis {
    return {
      azimuth: isSet(object.azimuth) ? Azimuth.fromJSON(object.azimuth) : undefined,
      elevation: isSet(object.elevation) ? Elevation.fromJSON(object.elevation) : undefined,
    };
  },

  toJSON(message: Axis): unknown {
    const obj: any = {};
    if (message.azimuth !== undefined) {
      obj.azimuth = Azimuth.toJSON(message.azimuth);
    }
    if (message.elevation !== undefined) {
      obj.elevation = Elevation.toJSON(message.elevation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Axis>, I>>(base?: I): Axis {
    return Axis.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Axis>, I>>(object: I): Axis {
    const message = createBaseAxis();
    message.azimuth = (object.azimuth !== undefined && object.azimuth !== null)
      ? Azimuth.fromPartial(object.azimuth)
      : undefined;
    message.elevation = (object.elevation !== undefined && object.elevation !== null)
      ? Elevation.fromPartial(object.elevation)
      : undefined;
    return message;
  },
};

function createBaseSetMode(): SetMode {
  return { mode: 0 };
}

export const SetMode = {
  encode(message: SetMode, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mode !== 0) {
      writer.uint32(8).int32(message.mode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetMode {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMode {
    return { mode: isSet(object.mode) ? jonGuiDataRotaryModeFromJSON(object.mode) : 0 };
  },

  toJSON(message: SetMode): unknown {
    const obj: any = {};
    if (message.mode !== 0) {
      obj.mode = jonGuiDataRotaryModeToJSON(message.mode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetMode>, I>>(base?: I): SetMode {
    return SetMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetMode>, I>>(object: I): SetMode {
    const message = createBaseSetMode();
    message.mode = object.mode ?? 0;
    return message;
  },
};

function createBaseSetAzimuthValue(): SetAzimuthValue {
  return { value: 0, direction: 0 };
}

export const SetAzimuthValue = {
  encode(message: SetAzimuthValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    if (message.direction !== 0) {
      writer.uint32(16).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetAzimuthValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAzimuthValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAzimuthValue {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      direction: isSet(object.direction) ? jonGuiDataRotaryDirectionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: SetAzimuthValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.direction !== 0) {
      obj.direction = jonGuiDataRotaryDirectionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAzimuthValue>, I>>(base?: I): SetAzimuthValue {
    return SetAzimuthValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetAzimuthValue>, I>>(object: I): SetAzimuthValue {
    const message = createBaseSetAzimuthValue();
    message.value = object.value ?? 0;
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseRotateAzimuthTo(): RotateAzimuthTo {
  return { targetValue: 0, speed: 0, direction: 0 };
}

export const RotateAzimuthTo = {
  encode(message: RotateAzimuthTo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetValue !== 0) {
      writer.uint32(13).float(message.targetValue);
    }
    if (message.speed !== 0) {
      writer.uint32(21).float(message.speed);
    }
    if (message.direction !== 0) {
      writer.uint32(24).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RotateAzimuthTo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotateAzimuthTo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.targetValue = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.speed = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RotateAzimuthTo {
    return {
      targetValue: isSet(object.targetValue) ? globalThis.Number(object.targetValue) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
      direction: isSet(object.direction) ? jonGuiDataRotaryDirectionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: RotateAzimuthTo): unknown {
    const obj: any = {};
    if (message.targetValue !== 0) {
      obj.targetValue = message.targetValue;
    }
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    if (message.direction !== 0) {
      obj.direction = jonGuiDataRotaryDirectionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RotateAzimuthTo>, I>>(base?: I): RotateAzimuthTo {
    return RotateAzimuthTo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RotateAzimuthTo>, I>>(object: I): RotateAzimuthTo {
    const message = createBaseRotateAzimuthTo();
    message.targetValue = object.targetValue ?? 0;
    message.speed = object.speed ?? 0;
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseRotateAzimuth(): RotateAzimuth {
  return { speed: 0, direction: 0 };
}

export const RotateAzimuth = {
  encode(message: RotateAzimuth, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.speed !== 0) {
      writer.uint32(13).float(message.speed);
    }
    if (message.direction !== 0) {
      writer.uint32(16).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RotateAzimuth {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotateAzimuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.speed = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RotateAzimuth {
    return {
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
      direction: isSet(object.direction) ? jonGuiDataRotaryDirectionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: RotateAzimuth): unknown {
    const obj: any = {};
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    if (message.direction !== 0) {
      obj.direction = jonGuiDataRotaryDirectionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RotateAzimuth>, I>>(base?: I): RotateAzimuth {
    return RotateAzimuth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RotateAzimuth>, I>>(object: I): RotateAzimuth {
    const message = createBaseRotateAzimuth();
    message.speed = object.speed ?? 0;
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseRotateElevation(): RotateElevation {
  return { speed: 0, direction: 0 };
}

export const RotateElevation = {
  encode(message: RotateElevation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.speed !== 0) {
      writer.uint32(13).float(message.speed);
    }
    if (message.direction !== 0) {
      writer.uint32(16).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RotateElevation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotateElevation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.speed = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RotateElevation {
    return {
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
      direction: isSet(object.direction) ? jonGuiDataRotaryDirectionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: RotateElevation): unknown {
    const obj: any = {};
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    if (message.direction !== 0) {
      obj.direction = jonGuiDataRotaryDirectionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RotateElevation>, I>>(base?: I): RotateElevation {
    return RotateElevation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RotateElevation>, I>>(object: I): RotateElevation {
    const message = createBaseRotateElevation();
    message.speed = object.speed ?? 0;
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseSetElevationValue(): SetElevationValue {
  return { value: 0 };
}

export const SetElevationValue = {
  encode(message: SetElevationValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetElevationValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetElevationValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetElevationValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetElevationValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetElevationValue>, I>>(base?: I): SetElevationValue {
    return SetElevationValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetElevationValue>, I>>(object: I): SetElevationValue {
    const message = createBaseSetElevationValue();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseRotateElevationTo(): RotateElevationTo {
  return { targetValue: 0, speed: 0 };
}

export const RotateElevationTo = {
  encode(message: RotateElevationTo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetValue !== 0) {
      writer.uint32(13).float(message.targetValue);
    }
    if (message.speed !== 0) {
      writer.uint32(21).float(message.speed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RotateElevationTo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotateElevationTo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.targetValue = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.speed = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RotateElevationTo {
    return {
      targetValue: isSet(object.targetValue) ? globalThis.Number(object.targetValue) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
    };
  },

  toJSON(message: RotateElevationTo): unknown {
    const obj: any = {};
    if (message.targetValue !== 0) {
      obj.targetValue = message.targetValue;
    }
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RotateElevationTo>, I>>(base?: I): RotateElevationTo {
    return RotateElevationTo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RotateElevationTo>, I>>(object: I): RotateElevationTo {
    const message = createBaseRotateElevationTo();
    message.targetValue = object.targetValue ?? 0;
    message.speed = object.speed ?? 0;
    return message;
  },
};

function createBaseRotateElevationRelative(): RotateElevationRelative {
  return { value: 0, speed: 0, direction: 0 };
}

export const RotateElevationRelative = {
  encode(message: RotateElevationRelative, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    if (message.speed !== 0) {
      writer.uint32(21).float(message.speed);
    }
    if (message.direction !== 0) {
      writer.uint32(24).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RotateElevationRelative {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotateElevationRelative();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.speed = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RotateElevationRelative {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
      direction: isSet(object.direction) ? jonGuiDataRotaryDirectionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: RotateElevationRelative): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    if (message.direction !== 0) {
      obj.direction = jonGuiDataRotaryDirectionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RotateElevationRelative>, I>>(base?: I): RotateElevationRelative {
    return RotateElevationRelative.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RotateElevationRelative>, I>>(object: I): RotateElevationRelative {
    const message = createBaseRotateElevationRelative();
    message.value = object.value ?? 0;
    message.speed = object.speed ?? 0;
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseRotateElevationRelativeSet(): RotateElevationRelativeSet {
  return { value: 0, direction: 0 };
}

export const RotateElevationRelativeSet = {
  encode(message: RotateElevationRelativeSet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    if (message.direction !== 0) {
      writer.uint32(16).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RotateElevationRelativeSet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotateElevationRelativeSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RotateElevationRelativeSet {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      direction: isSet(object.direction) ? jonGuiDataRotaryDirectionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: RotateElevationRelativeSet): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.direction !== 0) {
      obj.direction = jonGuiDataRotaryDirectionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RotateElevationRelativeSet>, I>>(base?: I): RotateElevationRelativeSet {
    return RotateElevationRelativeSet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RotateElevationRelativeSet>, I>>(object: I): RotateElevationRelativeSet {
    const message = createBaseRotateElevationRelativeSet();
    message.value = object.value ?? 0;
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseRotateAzimuthRelative(): RotateAzimuthRelative {
  return { value: 0, speed: 0, direction: 0 };
}

export const RotateAzimuthRelative = {
  encode(message: RotateAzimuthRelative, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    if (message.speed !== 0) {
      writer.uint32(21).float(message.speed);
    }
    if (message.direction !== 0) {
      writer.uint32(24).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RotateAzimuthRelative {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotateAzimuthRelative();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.speed = reader.float();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RotateAzimuthRelative {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
      direction: isSet(object.direction) ? jonGuiDataRotaryDirectionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: RotateAzimuthRelative): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    if (message.direction !== 0) {
      obj.direction = jonGuiDataRotaryDirectionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RotateAzimuthRelative>, I>>(base?: I): RotateAzimuthRelative {
    return RotateAzimuthRelative.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RotateAzimuthRelative>, I>>(object: I): RotateAzimuthRelative {
    const message = createBaseRotateAzimuthRelative();
    message.value = object.value ?? 0;
    message.speed = object.speed ?? 0;
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseRotateAzimuthRelativeSet(): RotateAzimuthRelativeSet {
  return { value: 0, direction: 0 };
}

export const RotateAzimuthRelativeSet = {
  encode(message: RotateAzimuthRelativeSet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    if (message.direction !== 0) {
      writer.uint32(16).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RotateAzimuthRelativeSet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotateAzimuthRelativeSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RotateAzimuthRelativeSet {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      direction: isSet(object.direction) ? jonGuiDataRotaryDirectionFromJSON(object.direction) : 0,
    };
  },

  toJSON(message: RotateAzimuthRelativeSet): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.direction !== 0) {
      obj.direction = jonGuiDataRotaryDirectionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RotateAzimuthRelativeSet>, I>>(base?: I): RotateAzimuthRelativeSet {
    return RotateAzimuthRelativeSet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RotateAzimuthRelativeSet>, I>>(object: I): RotateAzimuthRelativeSet {
    const message = createBaseRotateAzimuthRelativeSet();
    message.value = object.value ?? 0;
    message.direction = object.direction ?? 0;
    return message;
  },
};

function createBaseSetPlatformAzimuth(): SetPlatformAzimuth {
  return { value: 0 };
}

export const SetPlatformAzimuth = {
  encode(message: SetPlatformAzimuth, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPlatformAzimuth {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPlatformAzimuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPlatformAzimuth {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetPlatformAzimuth): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPlatformAzimuth>, I>>(base?: I): SetPlatformAzimuth {
    return SetPlatformAzimuth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPlatformAzimuth>, I>>(object: I): SetPlatformAzimuth {
    const message = createBaseSetPlatformAzimuth();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetPlatformElevation(): SetPlatformElevation {
  return { value: 0 };
}

export const SetPlatformElevation = {
  encode(message: SetPlatformElevation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPlatformElevation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPlatformElevation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPlatformElevation {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetPlatformElevation): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPlatformElevation>, I>>(base?: I): SetPlatformElevation {
    return SetPlatformElevation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPlatformElevation>, I>>(object: I): SetPlatformElevation {
    const message = createBaseSetPlatformElevation();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetPlatformBank(): SetPlatformBank {
  return { value: 0 };
}

export const SetPlatformBank = {
  encode(message: SetPlatformBank, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPlatformBank {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPlatformBank();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPlatformBank {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetPlatformBank): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPlatformBank>, I>>(base?: I): SetPlatformBank {
    return SetPlatformBank.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPlatformBank>, I>>(object: I): SetPlatformBank {
    const message = createBaseSetPlatformBank();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseGetMeteo(): GetMeteo {
  return {};
}

export const GetMeteo = {
  encode(_: GetMeteo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMeteo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeteo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMeteo {
    return {};
  },

  toJSON(_: GetMeteo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMeteo>, I>>(base?: I): GetMeteo {
    return GetMeteo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMeteo>, I>>(_: I): GetMeteo {
    const message = createBaseGetMeteo();
    return message;
  },
};

function createBaseAzimuth(): Azimuth {
  return {
    setValue: undefined,
    rotateTo: undefined,
    rotate: undefined,
    relative: undefined,
    relativeSet: undefined,
    halt: undefined,
  };
}

export const Azimuth = {
  encode(message: Azimuth, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.setValue !== undefined) {
      SetAzimuthValue.encode(message.setValue, writer.uint32(10).fork()).ldelim();
    }
    if (message.rotateTo !== undefined) {
      RotateAzimuthTo.encode(message.rotateTo, writer.uint32(18).fork()).ldelim();
    }
    if (message.rotate !== undefined) {
      RotateAzimuth.encode(message.rotate, writer.uint32(26).fork()).ldelim();
    }
    if (message.relative !== undefined) {
      RotateAzimuthRelative.encode(message.relative, writer.uint32(34).fork()).ldelim();
    }
    if (message.relativeSet !== undefined) {
      RotateAzimuthRelativeSet.encode(message.relativeSet, writer.uint32(42).fork()).ldelim();
    }
    if (message.halt !== undefined) {
      HaltAzimuth.encode(message.halt, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Azimuth {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzimuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setValue = SetAzimuthValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rotateTo = RotateAzimuthTo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rotate = RotateAzimuth.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.relative = RotateAzimuthRelative.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.relativeSet = RotateAzimuthRelativeSet.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.halt = HaltAzimuth.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Azimuth {
    return {
      setValue: isSet(object.setValue) ? SetAzimuthValue.fromJSON(object.setValue) : undefined,
      rotateTo: isSet(object.rotateTo) ? RotateAzimuthTo.fromJSON(object.rotateTo) : undefined,
      rotate: isSet(object.rotate) ? RotateAzimuth.fromJSON(object.rotate) : undefined,
      relative: isSet(object.relative) ? RotateAzimuthRelative.fromJSON(object.relative) : undefined,
      relativeSet: isSet(object.relativeSet) ? RotateAzimuthRelativeSet.fromJSON(object.relativeSet) : undefined,
      halt: isSet(object.halt) ? HaltAzimuth.fromJSON(object.halt) : undefined,
    };
  },

  toJSON(message: Azimuth): unknown {
    const obj: any = {};
    if (message.setValue !== undefined) {
      obj.setValue = SetAzimuthValue.toJSON(message.setValue);
    }
    if (message.rotateTo !== undefined) {
      obj.rotateTo = RotateAzimuthTo.toJSON(message.rotateTo);
    }
    if (message.rotate !== undefined) {
      obj.rotate = RotateAzimuth.toJSON(message.rotate);
    }
    if (message.relative !== undefined) {
      obj.relative = RotateAzimuthRelative.toJSON(message.relative);
    }
    if (message.relativeSet !== undefined) {
      obj.relativeSet = RotateAzimuthRelativeSet.toJSON(message.relativeSet);
    }
    if (message.halt !== undefined) {
      obj.halt = HaltAzimuth.toJSON(message.halt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Azimuth>, I>>(base?: I): Azimuth {
    return Azimuth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Azimuth>, I>>(object: I): Azimuth {
    const message = createBaseAzimuth();
    message.setValue = (object.setValue !== undefined && object.setValue !== null)
      ? SetAzimuthValue.fromPartial(object.setValue)
      : undefined;
    message.rotateTo = (object.rotateTo !== undefined && object.rotateTo !== null)
      ? RotateAzimuthTo.fromPartial(object.rotateTo)
      : undefined;
    message.rotate = (object.rotate !== undefined && object.rotate !== null)
      ? RotateAzimuth.fromPartial(object.rotate)
      : undefined;
    message.relative = (object.relative !== undefined && object.relative !== null)
      ? RotateAzimuthRelative.fromPartial(object.relative)
      : undefined;
    message.relativeSet = (object.relativeSet !== undefined && object.relativeSet !== null)
      ? RotateAzimuthRelativeSet.fromPartial(object.relativeSet)
      : undefined;
    message.halt = (object.halt !== undefined && object.halt !== null)
      ? HaltAzimuth.fromPartial(object.halt)
      : undefined;
    return message;
  },
};

function createBaseStart(): Start {
  return {};
}

export const Start = {
  encode(_: Start, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Start {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Start {
    return {};
  },

  toJSON(_: Start): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Start>, I>>(base?: I): Start {
    return Start.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Start>, I>>(_: I): Start {
    const message = createBaseStart();
    return message;
  },
};

function createBaseStop(): Stop {
  return {};
}

export const Stop = {
  encode(_: Stop, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Stop {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Stop {
    return {};
  },

  toJSON(_: Stop): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Stop>, I>>(base?: I): Stop {
    return Stop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stop>, I>>(_: I): Stop {
    const message = createBaseStop();
    return message;
  },
};

function createBaseHalt(): Halt {
  return {};
}

export const Halt = {
  encode(_: Halt, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Halt {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHalt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Halt {
    return {};
  },

  toJSON(_: Halt): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Halt>, I>>(base?: I): Halt {
    return Halt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Halt>, I>>(_: I): Halt {
    const message = createBaseHalt();
    return message;
  },
};

function createBaseHaltAzimuth(): HaltAzimuth {
  return {};
}

export const HaltAzimuth = {
  encode(_: HaltAzimuth, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HaltAzimuth {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHaltAzimuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HaltAzimuth {
    return {};
  },

  toJSON(_: HaltAzimuth): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HaltAzimuth>, I>>(base?: I): HaltAzimuth {
    return HaltAzimuth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HaltAzimuth>, I>>(_: I): HaltAzimuth {
    const message = createBaseHaltAzimuth();
    return message;
  },
};

function createBaseHaltElevation(): HaltElevation {
  return {};
}

export const HaltElevation = {
  encode(_: HaltElevation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HaltElevation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHaltElevation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HaltElevation {
    return {};
  },

  toJSON(_: HaltElevation): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HaltElevation>, I>>(base?: I): HaltElevation {
    return HaltElevation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HaltElevation>, I>>(_: I): HaltElevation {
    const message = createBaseHaltElevation();
    return message;
  },
};

function createBaseElevation(): Elevation {
  return {
    setValue: undefined,
    rotateTo: undefined,
    rotate: undefined,
    relative: undefined,
    relativeSet: undefined,
    halt: undefined,
  };
}

export const Elevation = {
  encode(message: Elevation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.setValue !== undefined) {
      SetElevationValue.encode(message.setValue, writer.uint32(10).fork()).ldelim();
    }
    if (message.rotateTo !== undefined) {
      RotateElevationTo.encode(message.rotateTo, writer.uint32(18).fork()).ldelim();
    }
    if (message.rotate !== undefined) {
      RotateElevation.encode(message.rotate, writer.uint32(26).fork()).ldelim();
    }
    if (message.relative !== undefined) {
      RotateElevationRelative.encode(message.relative, writer.uint32(34).fork()).ldelim();
    }
    if (message.relativeSet !== undefined) {
      RotateElevationRelativeSet.encode(message.relativeSet, writer.uint32(42).fork()).ldelim();
    }
    if (message.halt !== undefined) {
      HaltElevation.encode(message.halt, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Elevation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseElevation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setValue = SetElevationValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rotateTo = RotateElevationTo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rotate = RotateElevation.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.relative = RotateElevationRelative.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.relativeSet = RotateElevationRelativeSet.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.halt = HaltElevation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Elevation {
    return {
      setValue: isSet(object.setValue) ? SetElevationValue.fromJSON(object.setValue) : undefined,
      rotateTo: isSet(object.rotateTo) ? RotateElevationTo.fromJSON(object.rotateTo) : undefined,
      rotate: isSet(object.rotate) ? RotateElevation.fromJSON(object.rotate) : undefined,
      relative: isSet(object.relative) ? RotateElevationRelative.fromJSON(object.relative) : undefined,
      relativeSet: isSet(object.relativeSet) ? RotateElevationRelativeSet.fromJSON(object.relativeSet) : undefined,
      halt: isSet(object.halt) ? HaltElevation.fromJSON(object.halt) : undefined,
    };
  },

  toJSON(message: Elevation): unknown {
    const obj: any = {};
    if (message.setValue !== undefined) {
      obj.setValue = SetElevationValue.toJSON(message.setValue);
    }
    if (message.rotateTo !== undefined) {
      obj.rotateTo = RotateElevationTo.toJSON(message.rotateTo);
    }
    if (message.rotate !== undefined) {
      obj.rotate = RotateElevation.toJSON(message.rotate);
    }
    if (message.relative !== undefined) {
      obj.relative = RotateElevationRelative.toJSON(message.relative);
    }
    if (message.relativeSet !== undefined) {
      obj.relativeSet = RotateElevationRelativeSet.toJSON(message.relativeSet);
    }
    if (message.halt !== undefined) {
      obj.halt = HaltElevation.toJSON(message.halt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Elevation>, I>>(base?: I): Elevation {
    return Elevation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Elevation>, I>>(object: I): Elevation {
    const message = createBaseElevation();
    message.setValue = (object.setValue !== undefined && object.setValue !== null)
      ? SetElevationValue.fromPartial(object.setValue)
      : undefined;
    message.rotateTo = (object.rotateTo !== undefined && object.rotateTo !== null)
      ? RotateElevationTo.fromPartial(object.rotateTo)
      : undefined;
    message.rotate = (object.rotate !== undefined && object.rotate !== null)
      ? RotateElevation.fromPartial(object.rotate)
      : undefined;
    message.relative = (object.relative !== undefined && object.relative !== null)
      ? RotateElevationRelative.fromPartial(object.relative)
      : undefined;
    message.relativeSet = (object.relativeSet !== undefined && object.relativeSet !== null)
      ? RotateElevationRelativeSet.fromPartial(object.relativeSet)
      : undefined;
    message.halt = (object.halt !== undefined && object.halt !== null)
      ? HaltElevation.fromPartial(object.halt)
      : undefined;
    return message;
  },
};

function createBaseSetCalculateBasePositionFromCompass(): SetCalculateBasePositionFromCompass {
  return { flag: false };
}

export const SetCalculateBasePositionFromCompass = {
  encode(message: SetCalculateBasePositionFromCompass, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.flag !== false) {
      writer.uint32(8).bool(message.flag);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCalculateBasePositionFromCompass {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCalculateBasePositionFromCompass();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.flag = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCalculateBasePositionFromCompass {
    return { flag: isSet(object.flag) ? globalThis.Boolean(object.flag) : false };
  },

  toJSON(message: SetCalculateBasePositionFromCompass): unknown {
    const obj: any = {};
    if (message.flag !== false) {
      obj.flag = message.flag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCalculateBasePositionFromCompass>, I>>(
    base?: I,
  ): SetCalculateBasePositionFromCompass {
    return SetCalculateBasePositionFromCompass.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCalculateBasePositionFromCompass>, I>>(
    object: I,
  ): SetCalculateBasePositionFromCompass {
    const message = createBaseSetCalculateBasePositionFromCompass();
    message.flag = object.flag ?? false;
    return message;
  },
};

function createBaseRotateToGPS(): RotateToGPS {
  return { latitude: 0, longitude: 0, altitude: 0 };
}

export const RotateToGPS = {
  encode(message: RotateToGPS, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.latitude !== 0) {
      writer.uint32(13).float(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(21).float(message.longitude);
    }
    if (message.altitude !== 0) {
      writer.uint32(29).float(message.altitude);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RotateToGPS {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRotateToGPS();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.latitude = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.longitude = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.altitude = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RotateToGPS {
    return {
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      altitude: isSet(object.altitude) ? globalThis.Number(object.altitude) : 0,
    };
  },

  toJSON(message: RotateToGPS): unknown {
    const obj: any = {};
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.altitude !== 0) {
      obj.altitude = message.altitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RotateToGPS>, I>>(base?: I): RotateToGPS {
    return RotateToGPS.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RotateToGPS>, I>>(object: I): RotateToGPS {
    const message = createBaseRotateToGPS();
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    message.altitude = object.altitude ?? 0;
    return message;
  },
};

function createBaseSetOriginGPS(): SetOriginGPS {
  return { latitude: 0, longitude: 0, altitude: 0 };
}

export const SetOriginGPS = {
  encode(message: SetOriginGPS, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.latitude !== 0) {
      writer.uint32(13).float(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(21).float(message.longitude);
    }
    if (message.altitude !== 0) {
      writer.uint32(29).float(message.altitude);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetOriginGPS {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOriginGPS();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.latitude = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.longitude = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.altitude = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetOriginGPS {
    return {
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      altitude: isSet(object.altitude) ? globalThis.Number(object.altitude) : 0,
    };
  },

  toJSON(message: SetOriginGPS): unknown {
    const obj: any = {};
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.altitude !== 0) {
      obj.altitude = message.altitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetOriginGPS>, I>>(base?: I): SetOriginGPS {
    return SetOriginGPS.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetOriginGPS>, I>>(object: I): SetOriginGPS {
    const message = createBaseSetOriginGPS();
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    message.altitude = object.altitude ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
