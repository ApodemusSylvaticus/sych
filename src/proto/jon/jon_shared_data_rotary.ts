// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: jon_shared_data_rotary.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  JonGuiDataMeteo,
  JonGuiDataRotaryMode,
  jonGuiDataRotaryModeFromJSON,
  jonGuiDataRotaryModeToJSON,
} from "./jon_shared_data_types";

export interface JonGuiDataRotary {
  azimuth: number;
  azimuthSpeed: number;
  elevation: number;
  elevationSpeed: number;
  baseAzimuth: number;
  baseElevation: number;
  baseBank: number;
  isMoving: boolean;
  meteo: JonGuiDataMeteo | undefined;
  mode: JonGuiDataRotaryMode;
}

function createBaseJonGuiDataRotary(): JonGuiDataRotary {
  return {
    azimuth: 0,
    azimuthSpeed: 0,
    elevation: 0,
    elevationSpeed: 0,
    baseAzimuth: 0,
    baseElevation: 0,
    baseBank: 0,
    isMoving: false,
    meteo: undefined,
    mode: 0,
  };
}

export const JonGuiDataRotary = {
  encode(message: JonGuiDataRotary, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.azimuth !== 0) {
      writer.uint32(13).float(message.azimuth);
    }
    if (message.azimuthSpeed !== 0) {
      writer.uint32(21).float(message.azimuthSpeed);
    }
    if (message.elevation !== 0) {
      writer.uint32(29).float(message.elevation);
    }
    if (message.elevationSpeed !== 0) {
      writer.uint32(37).float(message.elevationSpeed);
    }
    if (message.baseAzimuth !== 0) {
      writer.uint32(45).float(message.baseAzimuth);
    }
    if (message.baseElevation !== 0) {
      writer.uint32(53).float(message.baseElevation);
    }
    if (message.baseBank !== 0) {
      writer.uint32(61).float(message.baseBank);
    }
    if (message.isMoving !== false) {
      writer.uint32(64).bool(message.isMoving);
    }
    if (message.meteo !== undefined) {
      JonGuiDataMeteo.encode(message.meteo, writer.uint32(74).fork()).ldelim();
    }
    if (message.mode !== 0) {
      writer.uint32(80).int32(message.mode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JonGuiDataRotary {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataRotary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.azimuth = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.azimuthSpeed = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.elevation = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.elevationSpeed = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.baseAzimuth = reader.float();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.baseElevation = reader.float();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.baseBank = reader.float();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isMoving = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.meteo = JonGuiDataMeteo.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataRotary {
    return {
      azimuth: isSet(object.azimuth) ? globalThis.Number(object.azimuth) : 0,
      azimuthSpeed: isSet(object.azimuthSpeed) ? globalThis.Number(object.azimuthSpeed) : 0,
      elevation: isSet(object.elevation) ? globalThis.Number(object.elevation) : 0,
      elevationSpeed: isSet(object.elevationSpeed) ? globalThis.Number(object.elevationSpeed) : 0,
      baseAzimuth: isSet(object.baseAzimuth) ? globalThis.Number(object.baseAzimuth) : 0,
      baseElevation: isSet(object.baseElevation) ? globalThis.Number(object.baseElevation) : 0,
      baseBank: isSet(object.baseBank) ? globalThis.Number(object.baseBank) : 0,
      isMoving: isSet(object.isMoving) ? globalThis.Boolean(object.isMoving) : false,
      meteo: isSet(object.meteo) ? JonGuiDataMeteo.fromJSON(object.meteo) : undefined,
      mode: isSet(object.mode) ? jonGuiDataRotaryModeFromJSON(object.mode) : 0,
    };
  },

  toJSON(message: JonGuiDataRotary): unknown {
    const obj: any = {};
    if (message.azimuth !== 0) {
      obj.azimuth = message.azimuth;
    }
    if (message.azimuthSpeed !== 0) {
      obj.azimuthSpeed = message.azimuthSpeed;
    }
    if (message.elevation !== 0) {
      obj.elevation = message.elevation;
    }
    if (message.elevationSpeed !== 0) {
      obj.elevationSpeed = message.elevationSpeed;
    }
    if (message.baseAzimuth !== 0) {
      obj.baseAzimuth = message.baseAzimuth;
    }
    if (message.baseElevation !== 0) {
      obj.baseElevation = message.baseElevation;
    }
    if (message.baseBank !== 0) {
      obj.baseBank = message.baseBank;
    }
    if (message.isMoving !== false) {
      obj.isMoving = message.isMoving;
    }
    if (message.meteo !== undefined) {
      obj.meteo = JonGuiDataMeteo.toJSON(message.meteo);
    }
    if (message.mode !== 0) {
      obj.mode = jonGuiDataRotaryModeToJSON(message.mode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataRotary>, I>>(base?: I): JonGuiDataRotary {
    return JonGuiDataRotary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataRotary>, I>>(object: I): JonGuiDataRotary {
    const message = createBaseJonGuiDataRotary();
    message.azimuth = object.azimuth ?? 0;
    message.azimuthSpeed = object.azimuthSpeed ?? 0;
    message.elevation = object.elevation ?? 0;
    message.elevationSpeed = object.elevationSpeed ?? 0;
    message.baseAzimuth = object.baseAzimuth ?? 0;
    message.baseElevation = object.baseElevation ?? 0;
    message.baseBank = object.baseBank ?? 0;
    message.isMoving = object.isMoving ?? false;
    message.meteo = (object.meteo !== undefined && object.meteo !== null)
      ? JonGuiDataMeteo.fromPartial(object.meteo)
      : undefined;
    message.mode = object.mode ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
