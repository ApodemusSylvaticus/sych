// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: jon_shared_cmd_day_camera.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal';

export interface SetValue {
  value: number;
}

export interface Move {
  targetValue: number;
  speed: number;
}

export interface Root {
  focus?: Focus | undefined;
  zoom?: Zoom | undefined;
  setExposure?: SetExposure | undefined;
  setGain?: SetGain | undefined;
  setIris?: SetIris | undefined;
  setAutoFocus?: SetAutoFocus | undefined;
  setRecording?: SetRecording | undefined;
  setInfraRedFilter?: SetInfraRedFilter | undefined;
  start?: Start | undefined;
  stop?: Stop | undefined;
  photo?: Photo | undefined;
  setAutoIris?: SetAutoIris | undefined;
  syncZoom?: SyncZoomToDayCamera | undefined;
  getPos?: GetPos | undefined;
  haltAll?: HaltAll | undefined;
  getMeteo?: GetMeteo | undefined;
}

export interface GetPos {}

export interface HaltAll {}

export interface Focus {
  setValue?: SetValue | undefined;
  move?: Move | undefined;
  halt?: Halt | undefined;
}

export interface Zoom {
  setValue?: SetValue | undefined;
  move?: Move | undefined;
  halt?: Halt | undefined;
  setZoomTableValue?: SetZoomTableValue | undefined;
  nextZoomTablePos?: NextZoomTablePos | undefined;
  prevZoomTablePos?: PrevZoomTablePos | undefined;
}

export interface NextZoomTablePos {}

export interface PrevZoomTablePos {}

export interface SetExposure {
  value: number;
}

export interface SetGain {
  value: number;
}

export interface SetIris {
  value: number;
}

export interface SetAutoFocus {
  value: boolean;
}

export interface SetRecording {
  value: boolean;
}

export interface SetInfraRedFilter {
  value: boolean;
}

export interface SetAutoIris {
  value: boolean;
}

export interface SyncZoomToDayCamera {
  value: boolean;
}

export interface SetZoomTableValue {
  value: number;
}

export interface Stop {}

export interface Start {}

export interface Photo {}

export interface Halt {}

export interface GetMeteo {}

function createBaseSetValue(): SetValue {
  return { value: 0 };
}

export const SetValue = {
  encode(message: SetValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetValue>, I>>(base?: I): SetValue {
    return SetValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetValue>, I>>(object: I): SetValue {
    const message = createBaseSetValue();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseMove(): Move {
  return { targetValue: 0, speed: 0 };
}

export const Move = {
  encode(message: Move, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetValue !== 0) {
      writer.uint32(13).float(message.targetValue);
    }
    if (message.speed !== 0) {
      writer.uint32(21).float(message.speed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Move {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.targetValue = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.speed = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Move {
    return {
      targetValue: isSet(object.targetValue) ? globalThis.Number(object.targetValue) : 0,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0,
    };
  },

  toJSON(message: Move): unknown {
    const obj: any = {};
    if (message.targetValue !== 0) {
      obj.targetValue = message.targetValue;
    }
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Move>, I>>(base?: I): Move {
    return Move.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Move>, I>>(object: I): Move {
    const message = createBaseMove();
    message.targetValue = object.targetValue ?? 0;
    message.speed = object.speed ?? 0;
    return message;
  },
};

function createBaseRoot(): Root {
  return {
    focus: undefined,
    zoom: undefined,
    setExposure: undefined,
    setGain: undefined,
    setIris: undefined,
    setAutoFocus: undefined,
    setRecording: undefined,
    setInfraRedFilter: undefined,
    start: undefined,
    stop: undefined,
    photo: undefined,
    setAutoIris: undefined,
    syncZoom: undefined,
    getPos: undefined,
    haltAll: undefined,
    getMeteo: undefined,
  };
}

export const Root = {
  encode(message: Root, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.focus !== undefined) {
      Focus.encode(message.focus, writer.uint32(10).fork()).ldelim();
    }
    if (message.zoom !== undefined) {
      Zoom.encode(message.zoom, writer.uint32(18).fork()).ldelim();
    }
    if (message.setExposure !== undefined) {
      SetExposure.encode(message.setExposure, writer.uint32(26).fork()).ldelim();
    }
    if (message.setGain !== undefined) {
      SetGain.encode(message.setGain, writer.uint32(34).fork()).ldelim();
    }
    if (message.setIris !== undefined) {
      SetIris.encode(message.setIris, writer.uint32(42).fork()).ldelim();
    }
    if (message.setAutoFocus !== undefined) {
      SetAutoFocus.encode(message.setAutoFocus, writer.uint32(50).fork()).ldelim();
    }
    if (message.setRecording !== undefined) {
      SetRecording.encode(message.setRecording, writer.uint32(58).fork()).ldelim();
    }
    if (message.setInfraRedFilter !== undefined) {
      SetInfraRedFilter.encode(message.setInfraRedFilter, writer.uint32(66).fork()).ldelim();
    }
    if (message.start !== undefined) {
      Start.encode(message.start, writer.uint32(74).fork()).ldelim();
    }
    if (message.stop !== undefined) {
      Stop.encode(message.stop, writer.uint32(82).fork()).ldelim();
    }
    if (message.photo !== undefined) {
      Photo.encode(message.photo, writer.uint32(90).fork()).ldelim();
    }
    if (message.setAutoIris !== undefined) {
      SetAutoIris.encode(message.setAutoIris, writer.uint32(98).fork()).ldelim();
    }
    if (message.syncZoom !== undefined) {
      SyncZoomToDayCamera.encode(message.syncZoom, writer.uint32(106).fork()).ldelim();
    }
    if (message.getPos !== undefined) {
      GetPos.encode(message.getPos, writer.uint32(114).fork()).ldelim();
    }
    if (message.haltAll !== undefined) {
      HaltAll.encode(message.haltAll, writer.uint32(122).fork()).ldelim();
    }
    if (message.getMeteo !== undefined) {
      GetMeteo.encode(message.getMeteo, writer.uint32(130).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Root {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.focus = Focus.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.zoom = Zoom.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.setExposure = SetExposure.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.setGain = SetGain.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.setIris = SetIris.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.setAutoFocus = SetAutoFocus.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.setRecording = SetRecording.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.setInfraRedFilter = SetInfraRedFilter.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.start = Start.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.stop = Stop.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.photo = Photo.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.setAutoIris = SetAutoIris.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.syncZoom = SyncZoomToDayCamera.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.getPos = GetPos.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.haltAll = HaltAll.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.getMeteo = GetMeteo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      focus: isSet(object.focus) ? Focus.fromJSON(object.focus) : undefined,
      zoom: isSet(object.zoom) ? Zoom.fromJSON(object.zoom) : undefined,
      setExposure: isSet(object.setExposure) ? SetExposure.fromJSON(object.setExposure) : undefined,
      setGain: isSet(object.setGain) ? SetGain.fromJSON(object.setGain) : undefined,
      setIris: isSet(object.setIris) ? SetIris.fromJSON(object.setIris) : undefined,
      setAutoFocus: isSet(object.setAutoFocus) ? SetAutoFocus.fromJSON(object.setAutoFocus) : undefined,
      setRecording: isSet(object.setRecording) ? SetRecording.fromJSON(object.setRecording) : undefined,
      setInfraRedFilter: isSet(object.setInfraRedFilter) ? SetInfraRedFilter.fromJSON(object.setInfraRedFilter) : undefined,
      start: isSet(object.start) ? Start.fromJSON(object.start) : undefined,
      stop: isSet(object.stop) ? Stop.fromJSON(object.stop) : undefined,
      photo: isSet(object.photo) ? Photo.fromJSON(object.photo) : undefined,
      setAutoIris: isSet(object.setAutoIris) ? SetAutoIris.fromJSON(object.setAutoIris) : undefined,
      syncZoom: isSet(object.syncZoom) ? SyncZoomToDayCamera.fromJSON(object.syncZoom) : undefined,
      getPos: isSet(object.getPos) ? GetPos.fromJSON(object.getPos) : undefined,
      haltAll: isSet(object.haltAll) ? HaltAll.fromJSON(object.haltAll) : undefined,
      getMeteo: isSet(object.getMeteo) ? GetMeteo.fromJSON(object.getMeteo) : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.focus !== undefined) {
      obj.focus = Focus.toJSON(message.focus);
    }
    if (message.zoom !== undefined) {
      obj.zoom = Zoom.toJSON(message.zoom);
    }
    if (message.setExposure !== undefined) {
      obj.setExposure = SetExposure.toJSON(message.setExposure);
    }
    if (message.setGain !== undefined) {
      obj.setGain = SetGain.toJSON(message.setGain);
    }
    if (message.setIris !== undefined) {
      obj.setIris = SetIris.toJSON(message.setIris);
    }
    if (message.setAutoFocus !== undefined) {
      obj.setAutoFocus = SetAutoFocus.toJSON(message.setAutoFocus);
    }
    if (message.setRecording !== undefined) {
      obj.setRecording = SetRecording.toJSON(message.setRecording);
    }
    if (message.setInfraRedFilter !== undefined) {
      obj.setInfraRedFilter = SetInfraRedFilter.toJSON(message.setInfraRedFilter);
    }
    if (message.start !== undefined) {
      obj.start = Start.toJSON(message.start);
    }
    if (message.stop !== undefined) {
      obj.stop = Stop.toJSON(message.stop);
    }
    if (message.photo !== undefined) {
      obj.photo = Photo.toJSON(message.photo);
    }
    if (message.setAutoIris !== undefined) {
      obj.setAutoIris = SetAutoIris.toJSON(message.setAutoIris);
    }
    if (message.syncZoom !== undefined) {
      obj.syncZoom = SyncZoomToDayCamera.toJSON(message.syncZoom);
    }
    if (message.getPos !== undefined) {
      obj.getPos = GetPos.toJSON(message.getPos);
    }
    if (message.haltAll !== undefined) {
      obj.haltAll = HaltAll.toJSON(message.haltAll);
    }
    if (message.getMeteo !== undefined) {
      obj.getMeteo = GetMeteo.toJSON(message.getMeteo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.focus = object.focus !== undefined && object.focus !== null ? Focus.fromPartial(object.focus) : undefined;
    message.zoom = object.zoom !== undefined && object.zoom !== null ? Zoom.fromPartial(object.zoom) : undefined;
    message.setExposure = object.setExposure !== undefined && object.setExposure !== null ? SetExposure.fromPartial(object.setExposure) : undefined;
    message.setGain = object.setGain !== undefined && object.setGain !== null ? SetGain.fromPartial(object.setGain) : undefined;
    message.setIris = object.setIris !== undefined && object.setIris !== null ? SetIris.fromPartial(object.setIris) : undefined;
    message.setAutoFocus =
      object.setAutoFocus !== undefined && object.setAutoFocus !== null ? SetAutoFocus.fromPartial(object.setAutoFocus) : undefined;
    message.setRecording =
      object.setRecording !== undefined && object.setRecording !== null ? SetRecording.fromPartial(object.setRecording) : undefined;
    message.setInfraRedFilter =
      object.setInfraRedFilter !== undefined && object.setInfraRedFilter !== null
        ? SetInfraRedFilter.fromPartial(object.setInfraRedFilter)
        : undefined;
    message.start = object.start !== undefined && object.start !== null ? Start.fromPartial(object.start) : undefined;
    message.stop = object.stop !== undefined && object.stop !== null ? Stop.fromPartial(object.stop) : undefined;
    message.photo = object.photo !== undefined && object.photo !== null ? Photo.fromPartial(object.photo) : undefined;
    message.setAutoIris = object.setAutoIris !== undefined && object.setAutoIris !== null ? SetAutoIris.fromPartial(object.setAutoIris) : undefined;
    message.syncZoom = object.syncZoom !== undefined && object.syncZoom !== null ? SyncZoomToDayCamera.fromPartial(object.syncZoom) : undefined;
    message.getPos = object.getPos !== undefined && object.getPos !== null ? GetPos.fromPartial(object.getPos) : undefined;
    message.haltAll = object.haltAll !== undefined && object.haltAll !== null ? HaltAll.fromPartial(object.haltAll) : undefined;
    message.getMeteo = object.getMeteo !== undefined && object.getMeteo !== null ? GetMeteo.fromPartial(object.getMeteo) : undefined;
    return message;
  },
};

function createBaseGetPos(): GetPos {
  return {};
}

export const GetPos = {
  encode(_: GetPos, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPos {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPos {
    return {};
  },

  toJSON(_: GetPos): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPos>, I>>(base?: I): GetPos {
    return GetPos.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPos>, I>>(_: I): GetPos {
    const message = createBaseGetPos();
    return message;
  },
};

function createBaseHaltAll(): HaltAll {
  return {};
}

export const HaltAll = {
  encode(_: HaltAll, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HaltAll {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHaltAll();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HaltAll {
    return {};
  },

  toJSON(_: HaltAll): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HaltAll>, I>>(base?: I): HaltAll {
    return HaltAll.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HaltAll>, I>>(_: I): HaltAll {
    const message = createBaseHaltAll();
    return message;
  },
};

function createBaseFocus(): Focus {
  return { setValue: undefined, move: undefined, halt: undefined };
}

export const Focus = {
  encode(message: Focus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.setValue !== undefined) {
      SetValue.encode(message.setValue, writer.uint32(10).fork()).ldelim();
    }
    if (message.move !== undefined) {
      Move.encode(message.move, writer.uint32(18).fork()).ldelim();
    }
    if (message.halt !== undefined) {
      Halt.encode(message.halt, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Focus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setValue = SetValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.move = Move.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.halt = Halt.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Focus {
    return {
      setValue: isSet(object.setValue) ? SetValue.fromJSON(object.setValue) : undefined,
      move: isSet(object.move) ? Move.fromJSON(object.move) : undefined,
      halt: isSet(object.halt) ? Halt.fromJSON(object.halt) : undefined,
    };
  },

  toJSON(message: Focus): unknown {
    const obj: any = {};
    if (message.setValue !== undefined) {
      obj.setValue = SetValue.toJSON(message.setValue);
    }
    if (message.move !== undefined) {
      obj.move = Move.toJSON(message.move);
    }
    if (message.halt !== undefined) {
      obj.halt = Halt.toJSON(message.halt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Focus>, I>>(base?: I): Focus {
    return Focus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Focus>, I>>(object: I): Focus {
    const message = createBaseFocus();
    message.setValue = object.setValue !== undefined && object.setValue !== null ? SetValue.fromPartial(object.setValue) : undefined;
    message.move = object.move !== undefined && object.move !== null ? Move.fromPartial(object.move) : undefined;
    message.halt = object.halt !== undefined && object.halt !== null ? Halt.fromPartial(object.halt) : undefined;
    return message;
  },
};

function createBaseZoom(): Zoom {
  return {
    setValue: undefined,
    move: undefined,
    halt: undefined,
    setZoomTableValue: undefined,
    nextZoomTablePos: undefined,
    prevZoomTablePos: undefined,
  };
}

export const Zoom = {
  encode(message: Zoom, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.setValue !== undefined) {
      SetValue.encode(message.setValue, writer.uint32(10).fork()).ldelim();
    }
    if (message.move !== undefined) {
      Move.encode(message.move, writer.uint32(18).fork()).ldelim();
    }
    if (message.halt !== undefined) {
      Halt.encode(message.halt, writer.uint32(26).fork()).ldelim();
    }
    if (message.setZoomTableValue !== undefined) {
      SetZoomTableValue.encode(message.setZoomTableValue, writer.uint32(34).fork()).ldelim();
    }
    if (message.nextZoomTablePos !== undefined) {
      NextZoomTablePos.encode(message.nextZoomTablePos, writer.uint32(42).fork()).ldelim();
    }
    if (message.prevZoomTablePos !== undefined) {
      PrevZoomTablePos.encode(message.prevZoomTablePos, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Zoom {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setValue = SetValue.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.move = Move.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.halt = Halt.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.setZoomTableValue = SetZoomTableValue.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.nextZoomTablePos = NextZoomTablePos.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.prevZoomTablePos = PrevZoomTablePos.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Zoom {
    return {
      setValue: isSet(object.setValue) ? SetValue.fromJSON(object.setValue) : undefined,
      move: isSet(object.move) ? Move.fromJSON(object.move) : undefined,
      halt: isSet(object.halt) ? Halt.fromJSON(object.halt) : undefined,
      setZoomTableValue: isSet(object.setZoomTableValue) ? SetZoomTableValue.fromJSON(object.setZoomTableValue) : undefined,
      nextZoomTablePos: isSet(object.nextZoomTablePos) ? NextZoomTablePos.fromJSON(object.nextZoomTablePos) : undefined,
      prevZoomTablePos: isSet(object.prevZoomTablePos) ? PrevZoomTablePos.fromJSON(object.prevZoomTablePos) : undefined,
    };
  },

  toJSON(message: Zoom): unknown {
    const obj: any = {};
    if (message.setValue !== undefined) {
      obj.setValue = SetValue.toJSON(message.setValue);
    }
    if (message.move !== undefined) {
      obj.move = Move.toJSON(message.move);
    }
    if (message.halt !== undefined) {
      obj.halt = Halt.toJSON(message.halt);
    }
    if (message.setZoomTableValue !== undefined) {
      obj.setZoomTableValue = SetZoomTableValue.toJSON(message.setZoomTableValue);
    }
    if (message.nextZoomTablePos !== undefined) {
      obj.nextZoomTablePos = NextZoomTablePos.toJSON(message.nextZoomTablePos);
    }
    if (message.prevZoomTablePos !== undefined) {
      obj.prevZoomTablePos = PrevZoomTablePos.toJSON(message.prevZoomTablePos);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Zoom>, I>>(base?: I): Zoom {
    return Zoom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Zoom>, I>>(object: I): Zoom {
    const message = createBaseZoom();
    message.setValue = object.setValue !== undefined && object.setValue !== null ? SetValue.fromPartial(object.setValue) : undefined;
    message.move = object.move !== undefined && object.move !== null ? Move.fromPartial(object.move) : undefined;
    message.halt = object.halt !== undefined && object.halt !== null ? Halt.fromPartial(object.halt) : undefined;
    message.setZoomTableValue =
      object.setZoomTableValue !== undefined && object.setZoomTableValue !== null
        ? SetZoomTableValue.fromPartial(object.setZoomTableValue)
        : undefined;
    message.nextZoomTablePos =
      object.nextZoomTablePos !== undefined && object.nextZoomTablePos !== null ? NextZoomTablePos.fromPartial(object.nextZoomTablePos) : undefined;
    message.prevZoomTablePos =
      object.prevZoomTablePos !== undefined && object.prevZoomTablePos !== null ? PrevZoomTablePos.fromPartial(object.prevZoomTablePos) : undefined;
    return message;
  },
};

function createBaseNextZoomTablePos(): NextZoomTablePos {
  return {};
}

export const NextZoomTablePos = {
  encode(_: NextZoomTablePos, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NextZoomTablePos {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNextZoomTablePos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NextZoomTablePos {
    return {};
  },

  toJSON(_: NextZoomTablePos): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NextZoomTablePos>, I>>(base?: I): NextZoomTablePos {
    return NextZoomTablePos.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NextZoomTablePos>, I>>(_: I): NextZoomTablePos {
    const message = createBaseNextZoomTablePos();
    return message;
  },
};

function createBasePrevZoomTablePos(): PrevZoomTablePos {
  return {};
}

export const PrevZoomTablePos = {
  encode(_: PrevZoomTablePos, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PrevZoomTablePos {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrevZoomTablePos();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PrevZoomTablePos {
    return {};
  },

  toJSON(_: PrevZoomTablePos): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PrevZoomTablePos>, I>>(base?: I): PrevZoomTablePos {
    return PrevZoomTablePos.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrevZoomTablePos>, I>>(_: I): PrevZoomTablePos {
    const message = createBasePrevZoomTablePos();
    return message;
  },
};

function createBaseSetExposure(): SetExposure {
  return { value: 0 };
}

export const SetExposure = {
  encode(message: SetExposure, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetExposure {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetExposure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetExposure {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetExposure): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetExposure>, I>>(base?: I): SetExposure {
    return SetExposure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetExposure>, I>>(object: I): SetExposure {
    const message = createBaseSetExposure();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetGain(): SetGain {
  return { value: 0 };
}

export const SetGain = {
  encode(message: SetGain, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetGain {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetGain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetGain {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetGain): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetGain>, I>>(base?: I): SetGain {
    return SetGain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetGain>, I>>(object: I): SetGain {
    const message = createBaseSetGain();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetIris(): SetIris {
  return { value: 0 };
}

export const SetIris = {
  encode(message: SetIris, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetIris {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetIris();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetIris {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetIris): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetIris>, I>>(base?: I): SetIris {
    return SetIris.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetIris>, I>>(object: I): SetIris {
    const message = createBaseSetIris();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetAutoFocus(): SetAutoFocus {
  return { value: false };
}

export const SetAutoFocus = {
  encode(message: SetAutoFocus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetAutoFocus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAutoFocus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAutoFocus {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: SetAutoFocus): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAutoFocus>, I>>(base?: I): SetAutoFocus {
    return SetAutoFocus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetAutoFocus>, I>>(object: I): SetAutoFocus {
    const message = createBaseSetAutoFocus();
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseSetRecording(): SetRecording {
  return { value: false };
}

export const SetRecording = {
  encode(message: SetRecording, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetRecording {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRecording();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRecording {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: SetRecording): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetRecording>, I>>(base?: I): SetRecording {
    return SetRecording.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetRecording>, I>>(object: I): SetRecording {
    const message = createBaseSetRecording();
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseSetInfraRedFilter(): SetInfraRedFilter {
  return { value: false };
}

export const SetInfraRedFilter = {
  encode(message: SetInfraRedFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetInfraRedFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInfraRedFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInfraRedFilter {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: SetInfraRedFilter): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetInfraRedFilter>, I>>(base?: I): SetInfraRedFilter {
    return SetInfraRedFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetInfraRedFilter>, I>>(object: I): SetInfraRedFilter {
    const message = createBaseSetInfraRedFilter();
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseSetAutoIris(): SetAutoIris {
  return { value: false };
}

export const SetAutoIris = {
  encode(message: SetAutoIris, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetAutoIris {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAutoIris();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAutoIris {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: SetAutoIris): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAutoIris>, I>>(base?: I): SetAutoIris {
    return SetAutoIris.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetAutoIris>, I>>(object: I): SetAutoIris {
    const message = createBaseSetAutoIris();
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseSyncZoomToDayCamera(): SyncZoomToDayCamera {
  return { value: false };
}

export const SyncZoomToDayCamera = {
  encode(message: SyncZoomToDayCamera, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== false) {
      writer.uint32(8).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SyncZoomToDayCamera {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncZoomToDayCamera();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncZoomToDayCamera {
    return { value: isSet(object.value) ? globalThis.Boolean(object.value) : false };
  },

  toJSON(message: SyncZoomToDayCamera): unknown {
    const obj: any = {};
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncZoomToDayCamera>, I>>(base?: I): SyncZoomToDayCamera {
    return SyncZoomToDayCamera.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncZoomToDayCamera>, I>>(object: I): SyncZoomToDayCamera {
    const message = createBaseSyncZoomToDayCamera();
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseSetZoomTableValue(): SetZoomTableValue {
  return { value: 0 };
}

export const SetZoomTableValue = {
  encode(message: SetZoomTableValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetZoomTableValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetZoomTableValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetZoomTableValue {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetZoomTableValue): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetZoomTableValue>, I>>(base?: I): SetZoomTableValue {
    return SetZoomTableValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetZoomTableValue>, I>>(object: I): SetZoomTableValue {
    const message = createBaseSetZoomTableValue();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseStop(): Stop {
  return {};
}

export const Stop = {
  encode(_: Stop, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Stop {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Stop {
    return {};
  },

  toJSON(_: Stop): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Stop>, I>>(base?: I): Stop {
    return Stop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stop>, I>>(_: I): Stop {
    const message = createBaseStop();
    return message;
  },
};

function createBaseStart(): Start {
  return {};
}

export const Start = {
  encode(_: Start, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Start {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Start {
    return {};
  },

  toJSON(_: Start): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Start>, I>>(base?: I): Start {
    return Start.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Start>, I>>(_: I): Start {
    const message = createBaseStart();
    return message;
  },
};

function createBasePhoto(): Photo {
  return {};
}

export const Photo = {
  encode(_: Photo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Photo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhoto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Photo {
    return {};
  },

  toJSON(_: Photo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Photo>, I>>(base?: I): Photo {
    return Photo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Photo>, I>>(_: I): Photo {
    const message = createBasePhoto();
    return message;
  },
};

function createBaseHalt(): Halt {
  return {};
}

export const Halt = {
  encode(_: Halt, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Halt {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHalt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Halt {
    return {};
  },

  toJSON(_: Halt): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Halt>, I>>(base?: I): Halt {
    return Halt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Halt>, I>>(_: I): Halt {
    const message = createBaseHalt();
    return message;
  },
};

function createBaseGetMeteo(): GetMeteo {
  return {};
}

export const GetMeteo = {
  encode(_: GetMeteo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMeteo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeteo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMeteo {
    return {};
  },

  toJSON(_: GetMeteo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMeteo>, I>>(base?: I): GetMeteo {
    return GetMeteo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMeteo>, I>>(_: I): GetMeteo {
    const message = createBaseGetMeteo();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
