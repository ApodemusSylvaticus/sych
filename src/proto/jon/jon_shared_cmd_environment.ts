// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.1
// source: jon_shared_cmd_environment.proto

/* eslint-disable */
import _m0 from 'protobufjs/minimal';
import {
  JonGuiDataEnvironmentGroundCondition,
  jonGuiDataEnvironmentGroundConditionFromJSON,
  jonGuiDataEnvironmentGroundConditionToJSON,
  JonGuiDataEnvironmentLightingCondition,
  jonGuiDataEnvironmentLightingConditionFromJSON,
  jonGuiDataEnvironmentLightingConditionToJSON,
  JonGuiDataEnvironmentLightSource,
  jonGuiDataEnvironmentLightSourceFromJSON,
  jonGuiDataEnvironmentLightSourceToJSON,
  JonGuiDataEnvironmentNetworkStatus,
  jonGuiDataEnvironmentNetworkStatusFromJSON,
  jonGuiDataEnvironmentNetworkStatusToJSON,
  JonGuiDataEnvironmentOpticalVisibility,
  jonGuiDataEnvironmentOpticalVisibilityFromJSON,
  jonGuiDataEnvironmentOpticalVisibilityToJSON,
  JonGuiDataEnvironmentPrecipitationType,
  jonGuiDataEnvironmentPrecipitationTypeFromJSON,
  jonGuiDataEnvironmentPrecipitationTypeToJSON,
  JonGuiDataEnvironmentThermalCondition,
  jonGuiDataEnvironmentThermalConditionFromJSON,
  jonGuiDataEnvironmentThermalConditionToJSON,
  JonGuiDataEnvironmentWeatherCondition,
  jonGuiDataEnvironmentWeatherConditionFromJSON,
  jonGuiDataEnvironmentWeatherConditionToJSON,
} from './jon_shared_data_types';

export interface Root {
  setWeatherCondition?: SetWeatherCondition | undefined;
  setLightingCondition?: SetLightingCondition | undefined;
  setPrecipitationType?: SetPrecipitationType | undefined;
  setGroundCondition?: SetGroundCondition | undefined;
  setOpticalVisibility?: SetOpticalVisibility | undefined;
  setThermalCondition?: SetThermalCondition | undefined;
  setNetworkStatus?: SetNetworkStatus | undefined;
  setLightSourceCondition?: SetLightSourceCondition | undefined;
}

export interface SetWeatherCondition {
  value: JonGuiDataEnvironmentWeatherCondition;
}

export interface SetLightingCondition {
  value: JonGuiDataEnvironmentLightingCondition;
}

export interface SetPrecipitationType {
  value: JonGuiDataEnvironmentPrecipitationType;
}

export interface SetGroundCondition {
  value: JonGuiDataEnvironmentGroundCondition;
}

export interface SetOpticalVisibility {
  value: JonGuiDataEnvironmentOpticalVisibility;
}

export interface SetThermalCondition {
  value: JonGuiDataEnvironmentThermalCondition;
}

export interface SetNetworkStatus {
  value: JonGuiDataEnvironmentNetworkStatus;
}

export interface SetLightSourceCondition {
  value: JonGuiDataEnvironmentLightSource;
}

function createBaseRoot(): Root {
  return {
    setWeatherCondition: undefined,
    setLightingCondition: undefined,
    setPrecipitationType: undefined,
    setGroundCondition: undefined,
    setOpticalVisibility: undefined,
    setThermalCondition: undefined,
    setNetworkStatus: undefined,
    setLightSourceCondition: undefined,
  };
}

export const Root = {
  encode(message: Root, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.setWeatherCondition !== undefined) {
      SetWeatherCondition.encode(message.setWeatherCondition, writer.uint32(10).fork()).ldelim();
    }
    if (message.setLightingCondition !== undefined) {
      SetLightingCondition.encode(message.setLightingCondition, writer.uint32(18).fork()).ldelim();
    }
    if (message.setPrecipitationType !== undefined) {
      SetPrecipitationType.encode(message.setPrecipitationType, writer.uint32(26).fork()).ldelim();
    }
    if (message.setGroundCondition !== undefined) {
      SetGroundCondition.encode(message.setGroundCondition, writer.uint32(34).fork()).ldelim();
    }
    if (message.setOpticalVisibility !== undefined) {
      SetOpticalVisibility.encode(message.setOpticalVisibility, writer.uint32(42).fork()).ldelim();
    }
    if (message.setThermalCondition !== undefined) {
      SetThermalCondition.encode(message.setThermalCondition, writer.uint32(50).fork()).ldelim();
    }
    if (message.setNetworkStatus !== undefined) {
      SetNetworkStatus.encode(message.setNetworkStatus, writer.uint32(58).fork()).ldelim();
    }
    if (message.setLightSourceCondition !== undefined) {
      SetLightSourceCondition.encode(message.setLightSourceCondition, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Root {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setWeatherCondition = SetWeatherCondition.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.setLightingCondition = SetLightingCondition.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.setPrecipitationType = SetPrecipitationType.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.setGroundCondition = SetGroundCondition.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.setOpticalVisibility = SetOpticalVisibility.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.setThermalCondition = SetThermalCondition.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.setNetworkStatus = SetNetworkStatus.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.setLightSourceCondition = SetLightSourceCondition.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      setWeatherCondition: isSet(object.setWeatherCondition) ? SetWeatherCondition.fromJSON(object.setWeatherCondition) : undefined,
      setLightingCondition: isSet(object.setLightingCondition) ? SetLightingCondition.fromJSON(object.setLightingCondition) : undefined,
      setPrecipitationType: isSet(object.setPrecipitationType) ? SetPrecipitationType.fromJSON(object.setPrecipitationType) : undefined,
      setGroundCondition: isSet(object.setGroundCondition) ? SetGroundCondition.fromJSON(object.setGroundCondition) : undefined,
      setOpticalVisibility: isSet(object.setOpticalVisibility) ? SetOpticalVisibility.fromJSON(object.setOpticalVisibility) : undefined,
      setThermalCondition: isSet(object.setThermalCondition) ? SetThermalCondition.fromJSON(object.setThermalCondition) : undefined,
      setNetworkStatus: isSet(object.setNetworkStatus) ? SetNetworkStatus.fromJSON(object.setNetworkStatus) : undefined,
      setLightSourceCondition: isSet(object.setLightSourceCondition) ? SetLightSourceCondition.fromJSON(object.setLightSourceCondition) : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.setWeatherCondition !== undefined) {
      obj.setWeatherCondition = SetWeatherCondition.toJSON(message.setWeatherCondition);
    }
    if (message.setLightingCondition !== undefined) {
      obj.setLightingCondition = SetLightingCondition.toJSON(message.setLightingCondition);
    }
    if (message.setPrecipitationType !== undefined) {
      obj.setPrecipitationType = SetPrecipitationType.toJSON(message.setPrecipitationType);
    }
    if (message.setGroundCondition !== undefined) {
      obj.setGroundCondition = SetGroundCondition.toJSON(message.setGroundCondition);
    }
    if (message.setOpticalVisibility !== undefined) {
      obj.setOpticalVisibility = SetOpticalVisibility.toJSON(message.setOpticalVisibility);
    }
    if (message.setThermalCondition !== undefined) {
      obj.setThermalCondition = SetThermalCondition.toJSON(message.setThermalCondition);
    }
    if (message.setNetworkStatus !== undefined) {
      obj.setNetworkStatus = SetNetworkStatus.toJSON(message.setNetworkStatus);
    }
    if (message.setLightSourceCondition !== undefined) {
      obj.setLightSourceCondition = SetLightSourceCondition.toJSON(message.setLightSourceCondition);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.setWeatherCondition =
      object.setWeatherCondition !== undefined && object.setWeatherCondition !== null
        ? SetWeatherCondition.fromPartial(object.setWeatherCondition)
        : undefined;
    message.setLightingCondition =
      object.setLightingCondition !== undefined && object.setLightingCondition !== null
        ? SetLightingCondition.fromPartial(object.setLightingCondition)
        : undefined;
    message.setPrecipitationType =
      object.setPrecipitationType !== undefined && object.setPrecipitationType !== null
        ? SetPrecipitationType.fromPartial(object.setPrecipitationType)
        : undefined;
    message.setGroundCondition =
      object.setGroundCondition !== undefined && object.setGroundCondition !== null
        ? SetGroundCondition.fromPartial(object.setGroundCondition)
        : undefined;
    message.setOpticalVisibility =
      object.setOpticalVisibility !== undefined && object.setOpticalVisibility !== null
        ? SetOpticalVisibility.fromPartial(object.setOpticalVisibility)
        : undefined;
    message.setThermalCondition =
      object.setThermalCondition !== undefined && object.setThermalCondition !== null
        ? SetThermalCondition.fromPartial(object.setThermalCondition)
        : undefined;
    message.setNetworkStatus =
      object.setNetworkStatus !== undefined && object.setNetworkStatus !== null ? SetNetworkStatus.fromPartial(object.setNetworkStatus) : undefined;
    message.setLightSourceCondition =
      object.setLightSourceCondition !== undefined && object.setLightSourceCondition !== null
        ? SetLightSourceCondition.fromPartial(object.setLightSourceCondition)
        : undefined;
    return message;
  },
};

function createBaseSetWeatherCondition(): SetWeatherCondition {
  return { value: 0 };
}

export const SetWeatherCondition = {
  encode(message: SetWeatherCondition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetWeatherCondition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetWeatherCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetWeatherCondition {
    return { value: isSet(object.value) ? jonGuiDataEnvironmentWeatherConditionFromJSON(object.value) : 0 };
  },

  toJSON(message: SetWeatherCondition): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataEnvironmentWeatherConditionToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetWeatherCondition>, I>>(base?: I): SetWeatherCondition {
    return SetWeatherCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetWeatherCondition>, I>>(object: I): SetWeatherCondition {
    const message = createBaseSetWeatherCondition();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetLightingCondition(): SetLightingCondition {
  return { value: 0 };
}

export const SetLightingCondition = {
  encode(message: SetLightingCondition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetLightingCondition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetLightingCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetLightingCondition {
    return { value: isSet(object.value) ? jonGuiDataEnvironmentLightingConditionFromJSON(object.value) : 0 };
  },

  toJSON(message: SetLightingCondition): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataEnvironmentLightingConditionToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetLightingCondition>, I>>(base?: I): SetLightingCondition {
    return SetLightingCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetLightingCondition>, I>>(object: I): SetLightingCondition {
    const message = createBaseSetLightingCondition();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetPrecipitationType(): SetPrecipitationType {
  return { value: 0 };
}

export const SetPrecipitationType = {
  encode(message: SetPrecipitationType, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPrecipitationType {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPrecipitationType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPrecipitationType {
    return { value: isSet(object.value) ? jonGuiDataEnvironmentPrecipitationTypeFromJSON(object.value) : 0 };
  },

  toJSON(message: SetPrecipitationType): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataEnvironmentPrecipitationTypeToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPrecipitationType>, I>>(base?: I): SetPrecipitationType {
    return SetPrecipitationType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPrecipitationType>, I>>(object: I): SetPrecipitationType {
    const message = createBaseSetPrecipitationType();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetGroundCondition(): SetGroundCondition {
  return { value: 0 };
}

export const SetGroundCondition = {
  encode(message: SetGroundCondition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetGroundCondition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetGroundCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetGroundCondition {
    return { value: isSet(object.value) ? jonGuiDataEnvironmentGroundConditionFromJSON(object.value) : 0 };
  },

  toJSON(message: SetGroundCondition): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataEnvironmentGroundConditionToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetGroundCondition>, I>>(base?: I): SetGroundCondition {
    return SetGroundCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetGroundCondition>, I>>(object: I): SetGroundCondition {
    const message = createBaseSetGroundCondition();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetOpticalVisibility(): SetOpticalVisibility {
  return { value: 0 };
}

export const SetOpticalVisibility = {
  encode(message: SetOpticalVisibility, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetOpticalVisibility {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOpticalVisibility();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetOpticalVisibility {
    return { value: isSet(object.value) ? jonGuiDataEnvironmentOpticalVisibilityFromJSON(object.value) : 0 };
  },

  toJSON(message: SetOpticalVisibility): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataEnvironmentOpticalVisibilityToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetOpticalVisibility>, I>>(base?: I): SetOpticalVisibility {
    return SetOpticalVisibility.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetOpticalVisibility>, I>>(object: I): SetOpticalVisibility {
    const message = createBaseSetOpticalVisibility();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetThermalCondition(): SetThermalCondition {
  return { value: 0 };
}

export const SetThermalCondition = {
  encode(message: SetThermalCondition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetThermalCondition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetThermalCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetThermalCondition {
    return { value: isSet(object.value) ? jonGuiDataEnvironmentThermalConditionFromJSON(object.value) : 0 };
  },

  toJSON(message: SetThermalCondition): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataEnvironmentThermalConditionToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetThermalCondition>, I>>(base?: I): SetThermalCondition {
    return SetThermalCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetThermalCondition>, I>>(object: I): SetThermalCondition {
    const message = createBaseSetThermalCondition();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetNetworkStatus(): SetNetworkStatus {
  return { value: 0 };
}

export const SetNetworkStatus = {
  encode(message: SetNetworkStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetNetworkStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetNetworkStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetNetworkStatus {
    return { value: isSet(object.value) ? jonGuiDataEnvironmentNetworkStatusFromJSON(object.value) : 0 };
  },

  toJSON(message: SetNetworkStatus): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataEnvironmentNetworkStatusToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetNetworkStatus>, I>>(base?: I): SetNetworkStatus {
    return SetNetworkStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetNetworkStatus>, I>>(object: I): SetNetworkStatus {
    const message = createBaseSetNetworkStatus();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetLightSourceCondition(): SetLightSourceCondition {
  return { value: 0 };
}

export const SetLightSourceCondition = {
  encode(message: SetLightSourceCondition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetLightSourceCondition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetLightSourceCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetLightSourceCondition {
    return { value: isSet(object.value) ? jonGuiDataEnvironmentLightSourceFromJSON(object.value) : 0 };
  },

  toJSON(message: SetLightSourceCondition): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = jonGuiDataEnvironmentLightSourceToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetLightSourceCondition>, I>>(base?: I): SetLightSourceCondition {
    return SetLightSourceCondition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetLightSourceCondition>, I>>(object: I): SetLightSourceCondition {
    const message = createBaseSetLightSourceCondition();
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
