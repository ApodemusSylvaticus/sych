// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.2
// source: jon_shared_data_compass.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { JonGuiDataMeteo } from "./jon_shared_data_types";

export interface JonGuiDataCompass {
  azimuth: number;
  elevation: number;
  bank: number;
  offsetAzimuth: number;
  offsetElevation: number;
  magneticDeclination: number;
  calibrating: boolean;
  meteo: JonGuiDataMeteo | undefined;
}

function createBaseJonGuiDataCompass(): JonGuiDataCompass {
  return {
    azimuth: 0,
    elevation: 0,
    bank: 0,
    offsetAzimuth: 0,
    offsetElevation: 0,
    magneticDeclination: 0,
    calibrating: false,
    meteo: undefined,
  };
}

export const JonGuiDataCompass = {
  encode(message: JonGuiDataCompass, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.azimuth !== 0) {
      writer.uint32(13).float(message.azimuth);
    }
    if (message.elevation !== 0) {
      writer.uint32(21).float(message.elevation);
    }
    if (message.bank !== 0) {
      writer.uint32(29).float(message.bank);
    }
    if (message.offsetAzimuth !== 0) {
      writer.uint32(37).float(message.offsetAzimuth);
    }
    if (message.offsetElevation !== 0) {
      writer.uint32(45).float(message.offsetElevation);
    }
    if (message.magneticDeclination !== 0) {
      writer.uint32(53).float(message.magneticDeclination);
    }
    if (message.calibrating !== false) {
      writer.uint32(56).bool(message.calibrating);
    }
    if (message.meteo !== undefined) {
      JonGuiDataMeteo.encode(message.meteo, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JonGuiDataCompass {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJonGuiDataCompass();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.azimuth = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.elevation = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.bank = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.offsetAzimuth = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.offsetElevation = reader.float();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.magneticDeclination = reader.float();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.calibrating = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.meteo = JonGuiDataMeteo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JonGuiDataCompass {
    return {
      azimuth: isSet(object.azimuth) ? globalThis.Number(object.azimuth) : 0,
      elevation: isSet(object.elevation) ? globalThis.Number(object.elevation) : 0,
      bank: isSet(object.bank) ? globalThis.Number(object.bank) : 0,
      offsetAzimuth: isSet(object.offsetAzimuth) ? globalThis.Number(object.offsetAzimuth) : 0,
      offsetElevation: isSet(object.offsetElevation) ? globalThis.Number(object.offsetElevation) : 0,
      magneticDeclination: isSet(object.magneticDeclination) ? globalThis.Number(object.magneticDeclination) : 0,
      calibrating: isSet(object.calibrating) ? globalThis.Boolean(object.calibrating) : false,
      meteo: isSet(object.meteo) ? JonGuiDataMeteo.fromJSON(object.meteo) : undefined,
    };
  },

  toJSON(message: JonGuiDataCompass): unknown {
    const obj: any = {};
    if (message.azimuth !== 0) {
      obj.azimuth = message.azimuth;
    }
    if (message.elevation !== 0) {
      obj.elevation = message.elevation;
    }
    if (message.bank !== 0) {
      obj.bank = message.bank;
    }
    if (message.offsetAzimuth !== 0) {
      obj.offsetAzimuth = message.offsetAzimuth;
    }
    if (message.offsetElevation !== 0) {
      obj.offsetElevation = message.offsetElevation;
    }
    if (message.magneticDeclination !== 0) {
      obj.magneticDeclination = message.magneticDeclination;
    }
    if (message.calibrating !== false) {
      obj.calibrating = message.calibrating;
    }
    if (message.meteo !== undefined) {
      obj.meteo = JonGuiDataMeteo.toJSON(message.meteo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JonGuiDataCompass>, I>>(base?: I): JonGuiDataCompass {
    return JonGuiDataCompass.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JonGuiDataCompass>, I>>(object: I): JonGuiDataCompass {
    const message = createBaseJonGuiDataCompass();
    message.azimuth = object.azimuth ?? 0;
    message.elevation = object.elevation ?? 0;
    message.bank = object.bank ?? 0;
    message.offsetAzimuth = object.offsetAzimuth ?? 0;
    message.offsetElevation = object.offsetElevation ?? 0;
    message.magneticDeclination = object.magneticDeclination ?? 0;
    message.calibrating = object.calibrating ?? false;
    message.meteo = (object.meteo !== undefined && object.meteo !== null)
      ? JonGuiDataMeteo.fromPartial(object.meteo)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
