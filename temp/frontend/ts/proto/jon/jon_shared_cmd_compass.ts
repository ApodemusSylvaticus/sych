// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.2
// source: jon_shared_cmd_compass.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export interface Root {
  start?: Start | undefined;
  stop?: Stop | undefined;
  refreshRate?: SetRefreshRate | undefined;
  setMagneticDeclination?: SetMagneticDeclination | undefined;
  setOffsetAngleAzimuth?: SetOffsetAngleAzimuth | undefined;
  setOffsetAngleElevation?: SetOffsetAngleElevation | undefined;
  setUseRotaryPosition?: SetUseRotaryPosition | undefined;
  startCalibrateLong?: CalibrateStartLong | undefined;
  startCalibrateShort?: CalibrateStartShort | undefined;
  calibrateNext?: CalibrateNext | undefined;
  calibrateCencel?: CalibrateCencel | undefined;
  getMeteo?: GetMeteo | undefined;
}

export interface Start {
}

export interface Stop {
}

export interface Next {
}

export interface GetMeteo {
}

export interface CalibrateStartLong {
}

export interface CalibrateStartShort {
}

export interface CalibrateNext {
}

export interface CalibrateCencel {
}

export interface SetRefreshRate {
  /** milliseconds */
  value: number;
}

export interface SetMagneticDeclination {
  value: number;
}

export interface SetOffsetAngleAzimuth {
  value: number;
}

export interface SetOffsetAngleElevation {
  value: number;
}

export interface SetUseRotaryPosition {
  flag: boolean;
}

function createBaseRoot(): Root {
  return {
    start: undefined,
    stop: undefined,
    refreshRate: undefined,
    setMagneticDeclination: undefined,
    setOffsetAngleAzimuth: undefined,
    setOffsetAngleElevation: undefined,
    setUseRotaryPosition: undefined,
    startCalibrateLong: undefined,
    startCalibrateShort: undefined,
    calibrateNext: undefined,
    calibrateCencel: undefined,
    getMeteo: undefined,
  };
}

export const Root = {
  encode(message: Root, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.start !== undefined) {
      Start.encode(message.start, writer.uint32(10).fork()).ldelim();
    }
    if (message.stop !== undefined) {
      Stop.encode(message.stop, writer.uint32(18).fork()).ldelim();
    }
    if (message.refreshRate !== undefined) {
      SetRefreshRate.encode(message.refreshRate, writer.uint32(26).fork()).ldelim();
    }
    if (message.setMagneticDeclination !== undefined) {
      SetMagneticDeclination.encode(message.setMagneticDeclination, writer.uint32(34).fork()).ldelim();
    }
    if (message.setOffsetAngleAzimuth !== undefined) {
      SetOffsetAngleAzimuth.encode(message.setOffsetAngleAzimuth, writer.uint32(42).fork()).ldelim();
    }
    if (message.setOffsetAngleElevation !== undefined) {
      SetOffsetAngleElevation.encode(message.setOffsetAngleElevation, writer.uint32(50).fork()).ldelim();
    }
    if (message.setUseRotaryPosition !== undefined) {
      SetUseRotaryPosition.encode(message.setUseRotaryPosition, writer.uint32(58).fork()).ldelim();
    }
    if (message.startCalibrateLong !== undefined) {
      CalibrateStartLong.encode(message.startCalibrateLong, writer.uint32(66).fork()).ldelim();
    }
    if (message.startCalibrateShort !== undefined) {
      CalibrateStartShort.encode(message.startCalibrateShort, writer.uint32(74).fork()).ldelim();
    }
    if (message.calibrateNext !== undefined) {
      CalibrateNext.encode(message.calibrateNext, writer.uint32(82).fork()).ldelim();
    }
    if (message.calibrateCencel !== undefined) {
      CalibrateCencel.encode(message.calibrateCencel, writer.uint32(90).fork()).ldelim();
    }
    if (message.getMeteo !== undefined) {
      GetMeteo.encode(message.getMeteo, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Root {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.start = Start.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stop = Stop.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.refreshRate = SetRefreshRate.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.setMagneticDeclination = SetMagneticDeclination.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.setOffsetAngleAzimuth = SetOffsetAngleAzimuth.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.setOffsetAngleElevation = SetOffsetAngleElevation.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.setUseRotaryPosition = SetUseRotaryPosition.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.startCalibrateLong = CalibrateStartLong.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.startCalibrateShort = CalibrateStartShort.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.calibrateNext = CalibrateNext.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.calibrateCencel = CalibrateCencel.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.getMeteo = GetMeteo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      start: isSet(object.start) ? Start.fromJSON(object.start) : undefined,
      stop: isSet(object.stop) ? Stop.fromJSON(object.stop) : undefined,
      refreshRate: isSet(object.refreshRate) ? SetRefreshRate.fromJSON(object.refreshRate) : undefined,
      setMagneticDeclination: isSet(object.setMagneticDeclination)
        ? SetMagneticDeclination.fromJSON(object.setMagneticDeclination)
        : undefined,
      setOffsetAngleAzimuth: isSet(object.setOffsetAngleAzimuth)
        ? SetOffsetAngleAzimuth.fromJSON(object.setOffsetAngleAzimuth)
        : undefined,
      setOffsetAngleElevation: isSet(object.setOffsetAngleElevation)
        ? SetOffsetAngleElevation.fromJSON(object.setOffsetAngleElevation)
        : undefined,
      setUseRotaryPosition: isSet(object.setUseRotaryPosition)
        ? SetUseRotaryPosition.fromJSON(object.setUseRotaryPosition)
        : undefined,
      startCalibrateLong: isSet(object.startCalibrateLong)
        ? CalibrateStartLong.fromJSON(object.startCalibrateLong)
        : undefined,
      startCalibrateShort: isSet(object.startCalibrateShort)
        ? CalibrateStartShort.fromJSON(object.startCalibrateShort)
        : undefined,
      calibrateNext: isSet(object.calibrateNext) ? CalibrateNext.fromJSON(object.calibrateNext) : undefined,
      calibrateCencel: isSet(object.calibrateCencel) ? CalibrateCencel.fromJSON(object.calibrateCencel) : undefined,
      getMeteo: isSet(object.getMeteo) ? GetMeteo.fromJSON(object.getMeteo) : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = Start.toJSON(message.start);
    }
    if (message.stop !== undefined) {
      obj.stop = Stop.toJSON(message.stop);
    }
    if (message.refreshRate !== undefined) {
      obj.refreshRate = SetRefreshRate.toJSON(message.refreshRate);
    }
    if (message.setMagneticDeclination !== undefined) {
      obj.setMagneticDeclination = SetMagneticDeclination.toJSON(message.setMagneticDeclination);
    }
    if (message.setOffsetAngleAzimuth !== undefined) {
      obj.setOffsetAngleAzimuth = SetOffsetAngleAzimuth.toJSON(message.setOffsetAngleAzimuth);
    }
    if (message.setOffsetAngleElevation !== undefined) {
      obj.setOffsetAngleElevation = SetOffsetAngleElevation.toJSON(message.setOffsetAngleElevation);
    }
    if (message.setUseRotaryPosition !== undefined) {
      obj.setUseRotaryPosition = SetUseRotaryPosition.toJSON(message.setUseRotaryPosition);
    }
    if (message.startCalibrateLong !== undefined) {
      obj.startCalibrateLong = CalibrateStartLong.toJSON(message.startCalibrateLong);
    }
    if (message.startCalibrateShort !== undefined) {
      obj.startCalibrateShort = CalibrateStartShort.toJSON(message.startCalibrateShort);
    }
    if (message.calibrateNext !== undefined) {
      obj.calibrateNext = CalibrateNext.toJSON(message.calibrateNext);
    }
    if (message.calibrateCencel !== undefined) {
      obj.calibrateCencel = CalibrateCencel.toJSON(message.calibrateCencel);
    }
    if (message.getMeteo !== undefined) {
      obj.getMeteo = GetMeteo.toJSON(message.getMeteo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.start = (object.start !== undefined && object.start !== null) ? Start.fromPartial(object.start) : undefined;
    message.stop = (object.stop !== undefined && object.stop !== null) ? Stop.fromPartial(object.stop) : undefined;
    message.refreshRate = (object.refreshRate !== undefined && object.refreshRate !== null)
      ? SetRefreshRate.fromPartial(object.refreshRate)
      : undefined;
    message.setMagneticDeclination =
      (object.setMagneticDeclination !== undefined && object.setMagneticDeclination !== null)
        ? SetMagneticDeclination.fromPartial(object.setMagneticDeclination)
        : undefined;
    message.setOffsetAngleAzimuth =
      (object.setOffsetAngleAzimuth !== undefined && object.setOffsetAngleAzimuth !== null)
        ? SetOffsetAngleAzimuth.fromPartial(object.setOffsetAngleAzimuth)
        : undefined;
    message.setOffsetAngleElevation =
      (object.setOffsetAngleElevation !== undefined && object.setOffsetAngleElevation !== null)
        ? SetOffsetAngleElevation.fromPartial(object.setOffsetAngleElevation)
        : undefined;
    message.setUseRotaryPosition = (object.setUseRotaryPosition !== undefined && object.setUseRotaryPosition !== null)
      ? SetUseRotaryPosition.fromPartial(object.setUseRotaryPosition)
      : undefined;
    message.startCalibrateLong = (object.startCalibrateLong !== undefined && object.startCalibrateLong !== null)
      ? CalibrateStartLong.fromPartial(object.startCalibrateLong)
      : undefined;
    message.startCalibrateShort = (object.startCalibrateShort !== undefined && object.startCalibrateShort !== null)
      ? CalibrateStartShort.fromPartial(object.startCalibrateShort)
      : undefined;
    message.calibrateNext = (object.calibrateNext !== undefined && object.calibrateNext !== null)
      ? CalibrateNext.fromPartial(object.calibrateNext)
      : undefined;
    message.calibrateCencel = (object.calibrateCencel !== undefined && object.calibrateCencel !== null)
      ? CalibrateCencel.fromPartial(object.calibrateCencel)
      : undefined;
    message.getMeteo = (object.getMeteo !== undefined && object.getMeteo !== null)
      ? GetMeteo.fromPartial(object.getMeteo)
      : undefined;
    return message;
  },
};

function createBaseStart(): Start {
  return {};
}

export const Start = {
  encode(_: Start, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Start {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Start {
    return {};
  },

  toJSON(_: Start): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Start>, I>>(base?: I): Start {
    return Start.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Start>, I>>(_: I): Start {
    const message = createBaseStart();
    return message;
  },
};

function createBaseStop(): Stop {
  return {};
}

export const Stop = {
  encode(_: Stop, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Stop {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Stop {
    return {};
  },

  toJSON(_: Stop): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Stop>, I>>(base?: I): Stop {
    return Stop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stop>, I>>(_: I): Stop {
    const message = createBaseStop();
    return message;
  },
};

function createBaseNext(): Next {
  return {};
}

export const Next = {
  encode(_: Next, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Next {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Next {
    return {};
  },

  toJSON(_: Next): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Next>, I>>(base?: I): Next {
    return Next.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Next>, I>>(_: I): Next {
    const message = createBaseNext();
    return message;
  },
};

function createBaseGetMeteo(): GetMeteo {
  return {};
}

export const GetMeteo = {
  encode(_: GetMeteo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMeteo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeteo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMeteo {
    return {};
  },

  toJSON(_: GetMeteo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMeteo>, I>>(base?: I): GetMeteo {
    return GetMeteo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMeteo>, I>>(_: I): GetMeteo {
    const message = createBaseGetMeteo();
    return message;
  },
};

function createBaseCalibrateStartLong(): CalibrateStartLong {
  return {};
}

export const CalibrateStartLong = {
  encode(_: CalibrateStartLong, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CalibrateStartLong {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalibrateStartLong();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CalibrateStartLong {
    return {};
  },

  toJSON(_: CalibrateStartLong): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CalibrateStartLong>, I>>(base?: I): CalibrateStartLong {
    return CalibrateStartLong.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CalibrateStartLong>, I>>(_: I): CalibrateStartLong {
    const message = createBaseCalibrateStartLong();
    return message;
  },
};

function createBaseCalibrateStartShort(): CalibrateStartShort {
  return {};
}

export const CalibrateStartShort = {
  encode(_: CalibrateStartShort, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CalibrateStartShort {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalibrateStartShort();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CalibrateStartShort {
    return {};
  },

  toJSON(_: CalibrateStartShort): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CalibrateStartShort>, I>>(base?: I): CalibrateStartShort {
    return CalibrateStartShort.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CalibrateStartShort>, I>>(_: I): CalibrateStartShort {
    const message = createBaseCalibrateStartShort();
    return message;
  },
};

function createBaseCalibrateNext(): CalibrateNext {
  return {};
}

export const CalibrateNext = {
  encode(_: CalibrateNext, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CalibrateNext {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalibrateNext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CalibrateNext {
    return {};
  },

  toJSON(_: CalibrateNext): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CalibrateNext>, I>>(base?: I): CalibrateNext {
    return CalibrateNext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CalibrateNext>, I>>(_: I): CalibrateNext {
    const message = createBaseCalibrateNext();
    return message;
  },
};

function createBaseCalibrateCencel(): CalibrateCencel {
  return {};
}

export const CalibrateCencel = {
  encode(_: CalibrateCencel, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CalibrateCencel {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCalibrateCencel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CalibrateCencel {
    return {};
  },

  toJSON(_: CalibrateCencel): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CalibrateCencel>, I>>(base?: I): CalibrateCencel {
    return CalibrateCencel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CalibrateCencel>, I>>(_: I): CalibrateCencel {
    const message = createBaseCalibrateCencel();
    return message;
  },
};

function createBaseSetRefreshRate(): SetRefreshRate {
  return { value: 0 };
}

export const SetRefreshRate = {
  encode(message: SetRefreshRate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(8).uint32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetRefreshRate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRefreshRate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.value = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRefreshRate {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetRefreshRate): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetRefreshRate>, I>>(base?: I): SetRefreshRate {
    return SetRefreshRate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetRefreshRate>, I>>(object: I): SetRefreshRate {
    const message = createBaseSetRefreshRate();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetMagneticDeclination(): SetMagneticDeclination {
  return { value: 0 };
}

export const SetMagneticDeclination = {
  encode(message: SetMagneticDeclination, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetMagneticDeclination {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMagneticDeclination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMagneticDeclination {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetMagneticDeclination): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetMagneticDeclination>, I>>(base?: I): SetMagneticDeclination {
    return SetMagneticDeclination.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetMagneticDeclination>, I>>(object: I): SetMagneticDeclination {
    const message = createBaseSetMagneticDeclination();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetOffsetAngleAzimuth(): SetOffsetAngleAzimuth {
  return { value: 0 };
}

export const SetOffsetAngleAzimuth = {
  encode(message: SetOffsetAngleAzimuth, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetOffsetAngleAzimuth {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOffsetAngleAzimuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetOffsetAngleAzimuth {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetOffsetAngleAzimuth): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetOffsetAngleAzimuth>, I>>(base?: I): SetOffsetAngleAzimuth {
    return SetOffsetAngleAzimuth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetOffsetAngleAzimuth>, I>>(object: I): SetOffsetAngleAzimuth {
    const message = createBaseSetOffsetAngleAzimuth();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetOffsetAngleElevation(): SetOffsetAngleElevation {
  return { value: 0 };
}

export const SetOffsetAngleElevation = {
  encode(message: SetOffsetAngleElevation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== 0) {
      writer.uint32(13).float(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetOffsetAngleElevation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOffsetAngleElevation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.value = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetOffsetAngleElevation {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetOffsetAngleElevation): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetOffsetAngleElevation>, I>>(base?: I): SetOffsetAngleElevation {
    return SetOffsetAngleElevation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetOffsetAngleElevation>, I>>(object: I): SetOffsetAngleElevation {
    const message = createBaseSetOffsetAngleElevation();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSetUseRotaryPosition(): SetUseRotaryPosition {
  return { flag: false };
}

export const SetUseRotaryPosition = {
  encode(message: SetUseRotaryPosition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.flag !== false) {
      writer.uint32(8).bool(message.flag);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUseRotaryPosition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUseRotaryPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.flag = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUseRotaryPosition {
    return { flag: isSet(object.flag) ? globalThis.Boolean(object.flag) : false };
  },

  toJSON(message: SetUseRotaryPosition): unknown {
    const obj: any = {};
    if (message.flag !== false) {
      obj.flag = message.flag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUseRotaryPosition>, I>>(base?: I): SetUseRotaryPosition {
    return SetUseRotaryPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetUseRotaryPosition>, I>>(object: I): SetUseRotaryPosition {
    const message = createBaseSetUseRotaryPosition();
    message.flag = object.flag ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
