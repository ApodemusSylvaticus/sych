// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.2
// source: jon_shared_cmd_power.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  JonGuiDataPowerCanDevice,
  jonGuiDataPowerCanDeviceFromJSON,
  jonGuiDataPowerCanDeviceToJSON,
} from "./jon_shared_data_types";

export interface Root {
  setDeviceState?: SetDeviceState | undefined;
  getMeteo?: GetMeteo | undefined;
}

export interface GetMeteo {
}

export interface PowerOn {
}

export interface PowerOff {
}

export interface PowerReset {
}

export interface CanOn {
}

export interface CanOff {
}

export interface CanReset {
}

export interface SetDeviceState {
  device: JonGuiDataPowerCanDevice;
  powerOn: PowerOn | undefined;
  powerOff: PowerOff | undefined;
  powerReset: PowerReset | undefined;
  canOn: CanOn | undefined;
  canOff: CanOff | undefined;
  canReset: CanReset | undefined;
}

function createBaseRoot(): Root {
  return { setDeviceState: undefined, getMeteo: undefined };
}

export const Root = {
  encode(message: Root, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.setDeviceState !== undefined) {
      SetDeviceState.encode(message.setDeviceState, writer.uint32(10).fork()).ldelim();
    }
    if (message.getMeteo !== undefined) {
      GetMeteo.encode(message.getMeteo, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Root {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.setDeviceState = SetDeviceState.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.getMeteo = GetMeteo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Root {
    return {
      setDeviceState: isSet(object.setDeviceState) ? SetDeviceState.fromJSON(object.setDeviceState) : undefined,
      getMeteo: isSet(object.getMeteo) ? GetMeteo.fromJSON(object.getMeteo) : undefined,
    };
  },

  toJSON(message: Root): unknown {
    const obj: any = {};
    if (message.setDeviceState !== undefined) {
      obj.setDeviceState = SetDeviceState.toJSON(message.setDeviceState);
    }
    if (message.getMeteo !== undefined) {
      obj.getMeteo = GetMeteo.toJSON(message.getMeteo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Root>, I>>(base?: I): Root {
    return Root.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Root>, I>>(object: I): Root {
    const message = createBaseRoot();
    message.setDeviceState = (object.setDeviceState !== undefined && object.setDeviceState !== null)
      ? SetDeviceState.fromPartial(object.setDeviceState)
      : undefined;
    message.getMeteo = (object.getMeteo !== undefined && object.getMeteo !== null)
      ? GetMeteo.fromPartial(object.getMeteo)
      : undefined;
    return message;
  },
};

function createBaseGetMeteo(): GetMeteo {
  return {};
}

export const GetMeteo = {
  encode(_: GetMeteo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMeteo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMeteo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMeteo {
    return {};
  },

  toJSON(_: GetMeteo): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMeteo>, I>>(base?: I): GetMeteo {
    return GetMeteo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMeteo>, I>>(_: I): GetMeteo {
    const message = createBaseGetMeteo();
    return message;
  },
};

function createBasePowerOn(): PowerOn {
  return {};
}

export const PowerOn = {
  encode(_: PowerOn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PowerOn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePowerOn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PowerOn {
    return {};
  },

  toJSON(_: PowerOn): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PowerOn>, I>>(base?: I): PowerOn {
    return PowerOn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PowerOn>, I>>(_: I): PowerOn {
    const message = createBasePowerOn();
    return message;
  },
};

function createBasePowerOff(): PowerOff {
  return {};
}

export const PowerOff = {
  encode(_: PowerOff, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PowerOff {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePowerOff();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PowerOff {
    return {};
  },

  toJSON(_: PowerOff): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PowerOff>, I>>(base?: I): PowerOff {
    return PowerOff.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PowerOff>, I>>(_: I): PowerOff {
    const message = createBasePowerOff();
    return message;
  },
};

function createBasePowerReset(): PowerReset {
  return {};
}

export const PowerReset = {
  encode(_: PowerReset, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PowerReset {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePowerReset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PowerReset {
    return {};
  },

  toJSON(_: PowerReset): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PowerReset>, I>>(base?: I): PowerReset {
    return PowerReset.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PowerReset>, I>>(_: I): PowerReset {
    const message = createBasePowerReset();
    return message;
  },
};

function createBaseCanOn(): CanOn {
  return {};
}

export const CanOn = {
  encode(_: CanOn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CanOn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanOn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CanOn {
    return {};
  },

  toJSON(_: CanOn): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CanOn>, I>>(base?: I): CanOn {
    return CanOn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanOn>, I>>(_: I): CanOn {
    const message = createBaseCanOn();
    return message;
  },
};

function createBaseCanOff(): CanOff {
  return {};
}

export const CanOff = {
  encode(_: CanOff, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CanOff {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanOff();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CanOff {
    return {};
  },

  toJSON(_: CanOff): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CanOff>, I>>(base?: I): CanOff {
    return CanOff.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanOff>, I>>(_: I): CanOff {
    const message = createBaseCanOff();
    return message;
  },
};

function createBaseCanReset(): CanReset {
  return {};
}

export const CanReset = {
  encode(_: CanReset, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CanReset {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanReset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CanReset {
    return {};
  },

  toJSON(_: CanReset): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CanReset>, I>>(base?: I): CanReset {
    return CanReset.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanReset>, I>>(_: I): CanReset {
    const message = createBaseCanReset();
    return message;
  },
};

function createBaseSetDeviceState(): SetDeviceState {
  return {
    device: 0,
    powerOn: undefined,
    powerOff: undefined,
    powerReset: undefined,
    canOn: undefined,
    canOff: undefined,
    canReset: undefined,
  };
}

export const SetDeviceState = {
  encode(message: SetDeviceState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.device !== 0) {
      writer.uint32(8).int32(message.device);
    }
    if (message.powerOn !== undefined) {
      PowerOn.encode(message.powerOn, writer.uint32(18).fork()).ldelim();
    }
    if (message.powerOff !== undefined) {
      PowerOff.encode(message.powerOff, writer.uint32(26).fork()).ldelim();
    }
    if (message.powerReset !== undefined) {
      PowerReset.encode(message.powerReset, writer.uint32(34).fork()).ldelim();
    }
    if (message.canOn !== undefined) {
      CanOn.encode(message.canOn, writer.uint32(42).fork()).ldelim();
    }
    if (message.canOff !== undefined) {
      CanOff.encode(message.canOff, writer.uint32(50).fork()).ldelim();
    }
    if (message.canReset !== undefined) {
      CanReset.encode(message.canReset, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDeviceState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDeviceState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.device = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.powerOn = PowerOn.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.powerOff = PowerOff.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.powerReset = PowerReset.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.canOn = CanOn.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.canOff = CanOff.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.canReset = CanReset.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDeviceState {
    return {
      device: isSet(object.device) ? jonGuiDataPowerCanDeviceFromJSON(object.device) : 0,
      powerOn: isSet(object.powerOn) ? PowerOn.fromJSON(object.powerOn) : undefined,
      powerOff: isSet(object.powerOff) ? PowerOff.fromJSON(object.powerOff) : undefined,
      powerReset: isSet(object.powerReset) ? PowerReset.fromJSON(object.powerReset) : undefined,
      canOn: isSet(object.canOn) ? CanOn.fromJSON(object.canOn) : undefined,
      canOff: isSet(object.canOff) ? CanOff.fromJSON(object.canOff) : undefined,
      canReset: isSet(object.canReset) ? CanReset.fromJSON(object.canReset) : undefined,
    };
  },

  toJSON(message: SetDeviceState): unknown {
    const obj: any = {};
    if (message.device !== 0) {
      obj.device = jonGuiDataPowerCanDeviceToJSON(message.device);
    }
    if (message.powerOn !== undefined) {
      obj.powerOn = PowerOn.toJSON(message.powerOn);
    }
    if (message.powerOff !== undefined) {
      obj.powerOff = PowerOff.toJSON(message.powerOff);
    }
    if (message.powerReset !== undefined) {
      obj.powerReset = PowerReset.toJSON(message.powerReset);
    }
    if (message.canOn !== undefined) {
      obj.canOn = CanOn.toJSON(message.canOn);
    }
    if (message.canOff !== undefined) {
      obj.canOff = CanOff.toJSON(message.canOff);
    }
    if (message.canReset !== undefined) {
      obj.canReset = CanReset.toJSON(message.canReset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDeviceState>, I>>(base?: I): SetDeviceState {
    return SetDeviceState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetDeviceState>, I>>(object: I): SetDeviceState {
    const message = createBaseSetDeviceState();
    message.device = object.device ?? 0;
    message.powerOn = (object.powerOn !== undefined && object.powerOn !== null)
      ? PowerOn.fromPartial(object.powerOn)
      : undefined;
    message.powerOff = (object.powerOff !== undefined && object.powerOff !== null)
      ? PowerOff.fromPartial(object.powerOff)
      : undefined;
    message.powerReset = (object.powerReset !== undefined && object.powerReset !== null)
      ? PowerReset.fromPartial(object.powerReset)
      : undefined;
    message.canOn = (object.canOn !== undefined && object.canOn !== null) ? CanOn.fromPartial(object.canOn) : undefined;
    message.canOff = (object.canOff !== undefined && object.canOff !== null)
      ? CanOff.fromPartial(object.canOff)
      : undefined;
    message.canReset = (object.canReset !== undefined && object.canReset !== null)
      ? CanReset.fromPartial(object.canReset)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
